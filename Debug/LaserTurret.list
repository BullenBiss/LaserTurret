
LaserTurret.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08003320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003ed0  200001dc  080034fc  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00001000  200040ac  080034fc  000240ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b194  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000363e  00000000  00000000  0003b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009133  00000000  00000000  0003e9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d50  00000000  00000000  00047b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001190  00000000  00000000  00048868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007126  00000000  00000000  000499f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000052f9  00000000  00000000  00050b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00055e17  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000284c  00000000  00000000  00055e94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003190 	.word	0x08003190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08003190 	.word	0x08003190

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x30>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000502:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800050a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f81b 	bl	8000548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f002 fcb4 	bl	8002e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f002 fbd4 	bl	8002cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800051c:	2000      	movs	r0, #0
 800051e:	bd08      	pop	{r3, pc}
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000524:	4a03      	ldr	r2, [pc, #12]	; (8000534 <HAL_IncTick+0x10>)
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <HAL_IncTick+0x14>)
 8000528:	6811      	ldr	r1, [r2, #0]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	440b      	add	r3, r1
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20003f44 	.word	0x20003f44
 8000538:	20000000 	.word	0x20000000

0800053c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <HAL_GetTick+0x8>)
 800053e:	6818      	ldr	r0, [r3, #0]
}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20003f44 	.word	0x20003f44

08000548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800054a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800054c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000550:	041b      	lsls	r3, r3, #16
 8000552:	0c1b      	lsrs	r3, r3, #16
 8000554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000558:	0200      	lsls	r0, r0, #8
 800055a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000562:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000564:	60d3      	str	r3, [r2, #12]
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	68dc      	ldr	r4, [r3, #12]
 8000572:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000576:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057c:	2b04      	cmp	r3, #4
 800057e:	bf28      	it	cs
 8000580:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000584:	f04f 0501 	mov.w	r5, #1
 8000588:	fa05 f303 	lsl.w	r3, r5, r3
 800058c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000590:	bf8c      	ite	hi
 8000592:	3c03      	subhi	r4, #3
 8000594:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000596:	4019      	ands	r1, r3
 8000598:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800059a:	fa05 f404 	lsl.w	r4, r5, r4
 800059e:	3c01      	subs	r4, #1
 80005a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a4:	ea42 0201 	orr.w	r2, r2, r1
 80005a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	bfaf      	iteee	ge
 80005ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	f000 000f 	andlt.w	r0, r0, #15
 80005b6:	4b06      	ldrlt	r3, [pc, #24]	; (80005d0 <HAL_NVIC_SetPriority+0x64>)
 80005b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	bfa5      	ittet	ge
 80005bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	e000ed14 	.word	0xe000ed14

080005d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005d4:	0942      	lsrs	r2, r0, #5
 80005d6:	2301      	movs	r3, #1
 80005d8:	f000 001f 	and.w	r0, r0, #31
 80005dc:	fa03 f000 	lsl.w	r0, r3, r0
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <HAL_NVIC_EnableIRQ+0x14>)
 80005e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005e6:	4770      	bx	lr
 80005e8:	e000e100 	.word	0xe000e100

080005ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005ec:	3801      	subs	r0, #1
 80005ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f2:	d20a      	bcs.n	800060a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	21f0      	movs	r1, #240	; 0xf0
 80005fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000600:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000602:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000604:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800060a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e010 	.word	0xe000e010
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800061a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800061c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800061e:	bf0c      	ite	eq
 8000620:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000624:	f022 0204 	bicne.w	r2, r2, #4
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	4770      	bx	lr
 800062c:	e000e010 	.word	0xe000e010

08000630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000634:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000636:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000638:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80007d8 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800063c:	4a64      	ldr	r2, [pc, #400]	; (80007d0 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800063e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000640:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000644:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000646:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000648:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800064c:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000650:	42b7      	cmp	r7, r6
 8000652:	f040 80ad 	bne.w	80007b0 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000656:	684c      	ldr	r4, [r1, #4]
 8000658:	f024 0a10 	bic.w	sl, r4, #16
 800065c:	f1ba 0f02 	cmp.w	sl, #2
 8000660:	d116      	bne.n	8000690 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000662:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000666:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800066a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800066e:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000672:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000676:	f04f 0e0f 	mov.w	lr, #15
 800067a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800067e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000682:	690d      	ldr	r5, [r1, #16]
 8000684:	fa05 f50b 	lsl.w	r5, r5, fp
 8000688:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800068c:	f8cc 5020 	str.w	r5, [ip, #32]
 8000690:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000694:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000696:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800069a:	fa05 f50c 	lsl.w	r5, r5, ip
 800069e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006a0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006a4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006a8:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ac:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006b0:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b4:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b8:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80006ba:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006be:	d815      	bhi.n	80006ec <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80006c0:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006c4:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006c8:	68cd      	ldr	r5, [r1, #12]
 80006ca:	fa05 fa0c 	lsl.w	sl, r5, ip
 80006ce:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80006d2:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80006d6:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006da:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006de:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80006e2:	fa0e fe03 	lsl.w	lr, lr, r3
 80006e6:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80006ea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006ec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006ee:	9d00      	ldr	r5, [sp, #0]
 80006f0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006f2:	688f      	ldr	r7, [r1, #8]
 80006f4:	fa07 f70c 	lsl.w	r7, r7, ip
 80006f8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006fa:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006fc:	00e5      	lsls	r5, r4, #3
 80006fe:	d557      	bpl.n	80007b0 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000700:	f04f 0b00 	mov.w	fp, #0
 8000704:	f8cd b00c 	str.w	fp, [sp, #12]
 8000708:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800070c:	4d31      	ldr	r5, [pc, #196]	; (80007d4 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000712:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000716:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800071a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800071e:	9703      	str	r7, [sp, #12]
 8000720:	9f03      	ldr	r7, [sp, #12]
 8000722:	f023 0703 	bic.w	r7, r3, #3
 8000726:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800072a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800072e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000732:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000736:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800073a:	f04f 0e0f 	mov.w	lr, #15
 800073e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000742:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000744:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000748:	d039      	beq.n	80007be <HAL_GPIO_Init+0x18e>
 800074a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074e:	42a8      	cmp	r0, r5
 8000750:	d037      	beq.n	80007c2 <HAL_GPIO_Init+0x192>
 8000752:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000756:	42a8      	cmp	r0, r5
 8000758:	d035      	beq.n	80007c6 <HAL_GPIO_Init+0x196>
 800075a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800075e:	42a8      	cmp	r0, r5
 8000760:	d033      	beq.n	80007ca <HAL_GPIO_Init+0x19a>
 8000762:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000766:	42a8      	cmp	r0, r5
 8000768:	bf14      	ite	ne
 800076a:	2507      	movne	r5, #7
 800076c:	2504      	moveq	r5, #4
 800076e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000772:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000776:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000778:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800077a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800077c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000780:	bf0c      	ite	eq
 8000782:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000784:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000786:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000788:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800078a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800078e:	bf0c      	ite	eq
 8000790:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000792:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000794:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000796:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000798:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800079c:	bf0c      	ite	eq
 800079e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007a0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007a2:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007a4:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007a6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007a8:	bf54      	ite	pl
 80007aa:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007ac:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007ae:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007b0:	3301      	adds	r3, #1
 80007b2:	2b10      	cmp	r3, #16
 80007b4:	f47f af47 	bne.w	8000646 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007b8:	b005      	add	sp, #20
 80007ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007be:	465d      	mov	r5, fp
 80007c0:	e7d5      	b.n	800076e <HAL_GPIO_Init+0x13e>
 80007c2:	2501      	movs	r5, #1
 80007c4:	e7d3      	b.n	800076e <HAL_GPIO_Init+0x13e>
 80007c6:	2502      	movs	r5, #2
 80007c8:	e7d1      	b.n	800076e <HAL_GPIO_Init+0x13e>
 80007ca:	2503      	movs	r5, #3
 80007cc:	e7cf      	b.n	800076e <HAL_GPIO_Init+0x13e>
 80007ce:	bf00      	nop
 80007d0:	40013c00 	.word	0x40013c00
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007dc:	b10a      	cbz	r2, 80007e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007de:	6181      	str	r1, [r0, #24]
 80007e0:	4770      	bx	lr
 80007e2:	0409      	lsls	r1, r1, #16
 80007e4:	e7fb      	b.n	80007de <HAL_GPIO_WritePin+0x2>
	...

080007e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007ec:	4604      	mov	r4, r0
 80007ee:	b918      	cbnz	r0, 80007f8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80007f0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80007f2:	b002      	add	sp, #8
 80007f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007f8:	6803      	ldr	r3, [r0, #0]
 80007fa:	07dd      	lsls	r5, r3, #31
 80007fc:	d410      	bmi.n	8000820 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	0798      	lsls	r0, r3, #30
 8000802:	d458      	bmi.n	80008b6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	071a      	lsls	r2, r3, #28
 8000808:	f100 809a 	bmi.w	8000940 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	075b      	lsls	r3, r3, #29
 8000810:	f100 80b8 	bmi.w	8000984 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000814:	69a2      	ldr	r2, [r4, #24]
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8119 	bne.w	8000a4e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800081c:	2000      	movs	r0, #0
 800081e:	e7e8      	b.n	80007f2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000820:	4ba6      	ldr	r3, [pc, #664]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	f002 020c 	and.w	r2, r2, #12
 8000828:	2a04      	cmp	r2, #4
 800082a:	d007      	beq.n	800083c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000832:	2a08      	cmp	r2, #8
 8000834:	d10a      	bne.n	800084c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	0259      	lsls	r1, r3, #9
 800083a:	d507      	bpl.n	800084c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800083c:	4b9f      	ldr	r3, [pc, #636]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	039a      	lsls	r2, r3, #14
 8000842:	d5dc      	bpl.n	80007fe <HAL_RCC_OscConfig+0x16>
 8000844:	6863      	ldr	r3, [r4, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1d9      	bne.n	80007fe <HAL_RCC_OscConfig+0x16>
 800084a:	e7d1      	b.n	80007f0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084c:	6863      	ldr	r3, [r4, #4]
 800084e:	4d9b      	ldr	r5, [pc, #620]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 8000850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000854:	d111      	bne.n	800087a <HAL_RCC_OscConfig+0x92>
 8000856:	682b      	ldr	r3, [r5, #0]
 8000858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800085e:	f7ff fe6d 	bl	800053c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000862:	4d96      	ldr	r5, [pc, #600]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000864:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000866:	682b      	ldr	r3, [r5, #0]
 8000868:	039b      	lsls	r3, r3, #14
 800086a:	d4c8      	bmi.n	80007fe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800086c:	f7ff fe66 	bl	800053c <HAL_GetTick>
 8000870:	1b80      	subs	r0, r0, r6
 8000872:	2864      	cmp	r0, #100	; 0x64
 8000874:	d9f7      	bls.n	8000866 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000876:	2003      	movs	r0, #3
 8000878:	e7bb      	b.n	80007f2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800087a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800087e:	d104      	bne.n	800088a <HAL_RCC_OscConfig+0xa2>
 8000880:	682b      	ldr	r3, [r5, #0]
 8000882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000886:	602b      	str	r3, [r5, #0]
 8000888:	e7e5      	b.n	8000856 <HAL_RCC_OscConfig+0x6e>
 800088a:	682a      	ldr	r2, [r5, #0]
 800088c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000890:	602a      	str	r2, [r5, #0]
 8000892:	682a      	ldr	r2, [r5, #0]
 8000894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000898:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1df      	bne.n	800085e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800089e:	f7ff fe4d 	bl	800053c <HAL_GetTick>
 80008a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	039f      	lsls	r7, r3, #14
 80008a8:	d5a9      	bpl.n	80007fe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008aa:	f7ff fe47 	bl	800053c <HAL_GetTick>
 80008ae:	1b80      	subs	r0, r0, r6
 80008b0:	2864      	cmp	r0, #100	; 0x64
 80008b2:	d9f7      	bls.n	80008a4 <HAL_RCC_OscConfig+0xbc>
 80008b4:	e7df      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008b6:	4b81      	ldr	r3, [pc, #516]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	f012 0f0c 	tst.w	r2, #12
 80008be:	d007      	beq.n	80008d0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008c6:	2a08      	cmp	r2, #8
 80008c8:	d111      	bne.n	80008ee <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	025e      	lsls	r6, r3, #9
 80008ce:	d40e      	bmi.n	80008ee <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008d0:	4b7a      	ldr	r3, [pc, #488]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	0795      	lsls	r5, r2, #30
 80008d6:	d502      	bpl.n	80008de <HAL_RCC_OscConfig+0xf6>
 80008d8:	68e2      	ldr	r2, [r4, #12]
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d188      	bne.n	80007f0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	6921      	ldr	r1, [r4, #16]
 80008e2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008e6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ec:	e78a      	b.n	8000804 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008ee:	68e2      	ldr	r2, [r4, #12]
 80008f0:	4b73      	ldr	r3, [pc, #460]	; (8000ac0 <HAL_RCC_OscConfig+0x2d8>)
 80008f2:	b1b2      	cbz	r2, 8000922 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f8:	f7ff fe20 	bl	800053c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008fc:	4d6f      	ldr	r5, [pc, #444]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	0798      	lsls	r0, r3, #30
 8000904:	d507      	bpl.n	8000916 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000906:	682b      	ldr	r3, [r5, #0]
 8000908:	6922      	ldr	r2, [r4, #16]
 800090a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800090e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000912:	602b      	str	r3, [r5, #0]
 8000914:	e776      	b.n	8000804 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000916:	f7ff fe11 	bl	800053c <HAL_GetTick>
 800091a:	1b80      	subs	r0, r0, r6
 800091c:	2802      	cmp	r0, #2
 800091e:	d9ef      	bls.n	8000900 <HAL_RCC_OscConfig+0x118>
 8000920:	e7a9      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000922:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000924:	f7ff fe0a 	bl	800053c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000928:	4d64      	ldr	r5, [pc, #400]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800092a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800092c:	682b      	ldr	r3, [r5, #0]
 800092e:	0799      	lsls	r1, r3, #30
 8000930:	f57f af68 	bpl.w	8000804 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000934:	f7ff fe02 	bl	800053c <HAL_GetTick>
 8000938:	1b80      	subs	r0, r0, r6
 800093a:	2802      	cmp	r0, #2
 800093c:	d9f6      	bls.n	800092c <HAL_RCC_OscConfig+0x144>
 800093e:	e79a      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000940:	6962      	ldr	r2, [r4, #20]
 8000942:	4b60      	ldr	r3, [pc, #384]	; (8000ac4 <HAL_RCC_OscConfig+0x2dc>)
 8000944:	b17a      	cbz	r2, 8000966 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800094a:	f7ff fdf7 	bl	800053c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094e:	4d5b      	ldr	r5, [pc, #364]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000950:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000952:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000954:	079f      	lsls	r7, r3, #30
 8000956:	f53f af59 	bmi.w	800080c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800095a:	f7ff fdef 	bl	800053c <HAL_GetTick>
 800095e:	1b80      	subs	r0, r0, r6
 8000960:	2802      	cmp	r0, #2
 8000962:	d9f6      	bls.n	8000952 <HAL_RCC_OscConfig+0x16a>
 8000964:	e787      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000966:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000968:	f7ff fde8 	bl	800053c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800096c:	4d53      	ldr	r5, [pc, #332]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800096e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000970:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000972:	0798      	lsls	r0, r3, #30
 8000974:	f57f af4a 	bpl.w	800080c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000978:	f7ff fde0 	bl	800053c <HAL_GetTick>
 800097c:	1b80      	subs	r0, r0, r6
 800097e:	2802      	cmp	r0, #2
 8000980:	d9f6      	bls.n	8000970 <HAL_RCC_OscConfig+0x188>
 8000982:	e778      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000984:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 8000986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000988:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800098c:	d128      	bne.n	80009e0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	9201      	str	r2, [sp, #4]
 8000990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000992:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000996:	641a      	str	r2, [r3, #64]	; 0x40
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009a2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009a4:	4d48      	ldr	r5, [pc, #288]	; (8000ac8 <HAL_RCC_OscConfig+0x2e0>)
 80009a6:	682b      	ldr	r3, [r5, #0]
 80009a8:	05d9      	lsls	r1, r3, #23
 80009aa:	d51b      	bpl.n	80009e4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ac:	68a3      	ldr	r3, [r4, #8]
 80009ae:	4d43      	ldr	r5, [pc, #268]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d127      	bne.n	8000a04 <HAL_RCC_OscConfig+0x21c>
 80009b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009bc:	f7ff fdbe 	bl	800053c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c0:	4d3e      	ldr	r5, [pc, #248]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009c2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009c4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009ca:	079b      	lsls	r3, r3, #30
 80009cc:	d539      	bpl.n	8000a42 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	f43f af20 	beq.w	8000814 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009d4:	4a39      	ldr	r2, [pc, #228]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 80009d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	e719      	b.n	8000814 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80009e0:	2600      	movs	r6, #0
 80009e2:	e7df      	b.n	80009a4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009ec:	f7ff fda6 	bl	800053c <HAL_GetTick>
 80009f0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	05da      	lsls	r2, r3, #23
 80009f6:	d4d9      	bmi.n	80009ac <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009f8:	f7ff fda0 	bl	800053c <HAL_GetTick>
 80009fc:	1bc0      	subs	r0, r0, r7
 80009fe:	2802      	cmp	r0, #2
 8000a00:	d9f7      	bls.n	80009f2 <HAL_RCC_OscConfig+0x20a>
 8000a02:	e738      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a04:	2b05      	cmp	r3, #5
 8000a06:	d104      	bne.n	8000a12 <HAL_RCC_OscConfig+0x22a>
 8000a08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	672b      	str	r3, [r5, #112]	; 0x70
 8000a10:	e7d0      	b.n	80009b4 <HAL_RCC_OscConfig+0x1cc>
 8000a12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a14:	f022 0201 	bic.w	r2, r2, #1
 8000a18:	672a      	str	r2, [r5, #112]	; 0x70
 8000a1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a1c:	f022 0204 	bic.w	r2, r2, #4
 8000a20:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1ca      	bne.n	80009bc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a26:	f7ff fd89 	bl	800053c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a2a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a2e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a32:	0798      	lsls	r0, r3, #30
 8000a34:	d5cb      	bpl.n	80009ce <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a36:	f7ff fd81 	bl	800053c <HAL_GetTick>
 8000a3a:	1bc0      	subs	r0, r0, r7
 8000a3c:	4540      	cmp	r0, r8
 8000a3e:	d9f7      	bls.n	8000a30 <HAL_RCC_OscConfig+0x248>
 8000a40:	e719      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a42:	f7ff fd7b 	bl	800053c <HAL_GetTick>
 8000a46:	1bc0      	subs	r0, r0, r7
 8000a48:	4540      	cmp	r0, r8
 8000a4a:	d9bd      	bls.n	80009c8 <HAL_RCC_OscConfig+0x1e0>
 8000a4c:	e713      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a4e:	4d1b      	ldr	r5, [pc, #108]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 8000a50:	68ab      	ldr	r3, [r5, #8]
 8000a52:	f003 030c 	and.w	r3, r3, #12
 8000a56:	2b08      	cmp	r3, #8
 8000a58:	f43f aeca 	beq.w	80007f0 <HAL_RCC_OscConfig+0x8>
 8000a5c:	4e1b      	ldr	r6, [pc, #108]	; (8000acc <HAL_RCC_OscConfig+0x2e4>)
 8000a5e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a60:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a62:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a64:	d134      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a66:	f7ff fd69 	bl	800053c <HAL_GetTick>
 8000a6a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	0199      	lsls	r1, r3, #6
 8000a70:	d41e      	bmi.n	8000ab0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a72:	6a22      	ldr	r2, [r4, #32]
 8000a74:	69e3      	ldr	r3, [r4, #28]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a7a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a86:	4c0d      	ldr	r4, [pc, #52]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a88:	0852      	lsrs	r2, r2, #1
 8000a8a:	3a01      	subs	r2, #1
 8000a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a90:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a92:	2301      	movs	r3, #1
 8000a94:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a96:	f7ff fd51 	bl	800053c <HAL_GetTick>
 8000a9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	019a      	lsls	r2, r3, #6
 8000aa0:	f53f aebc 	bmi.w	800081c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aa4:	f7ff fd4a 	bl	800053c <HAL_GetTick>
 8000aa8:	1b40      	subs	r0, r0, r5
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d9f6      	bls.n	8000a9c <HAL_RCC_OscConfig+0x2b4>
 8000aae:	e6e2      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ab0:	f7ff fd44 	bl	800053c <HAL_GetTick>
 8000ab4:	1bc0      	subs	r0, r0, r7
 8000ab6:	2802      	cmp	r0, #2
 8000ab8:	d9d8      	bls.n	8000a6c <HAL_RCC_OscConfig+0x284>
 8000aba:	e6dc      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	42470000 	.word	0x42470000
 8000ac4:	42470e80 	.word	0x42470e80
 8000ac8:	40007000 	.word	0x40007000
 8000acc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fd34 	bl	800053c <HAL_GetTick>
 8000ad4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ad6:	682b      	ldr	r3, [r5, #0]
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	f57f ae9f 	bpl.w	800081c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ade:	f7ff fd2d 	bl	800053c <HAL_GetTick>
 8000ae2:	1b00      	subs	r0, r0, r4
 8000ae4:	2802      	cmp	r0, #2
 8000ae6:	d9f6      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x2ee>
 8000ae8:	e6c5      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
 8000aea:	bf00      	nop

08000aec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000aec:	4913      	ldr	r1, [pc, #76]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000aee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000af0:	688b      	ldr	r3, [r1, #8]
 8000af2:	f003 030c 	and.w	r3, r3, #12
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d003      	beq.n	8000b02 <HAL_RCC_GetSysClockFreq+0x16>
 8000afa:	2b08      	cmp	r3, #8
 8000afc:	d003      	beq.n	8000b06 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000afe:	4810      	ldr	r0, [pc, #64]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b00:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b02:	4810      	ldr	r0, [pc, #64]	; (8000b44 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b04:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b08:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b0a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b10:	bf14      	ite	ne
 8000b12:	480c      	ldrne	r0, [pc, #48]	; (8000b44 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b14:	480a      	ldreq	r0, [pc, #40]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b16:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b1a:	bf18      	it	ne
 8000b1c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b22:	fba1 0100 	umull	r0, r1, r1, r0
 8000b26:	f7ff fb5b 	bl	80001e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x50>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b32:	3301      	adds	r3, #1
 8000b34:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b3a:	bd08      	pop	{r3, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	00f42400 	.word	0x00f42400
 8000b44:	017d7840 	.word	0x017d7840

08000b48 <HAL_RCC_ClockConfig>:
{
 8000b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b4e:	4604      	mov	r4, r0
 8000b50:	b910      	cbnz	r0, 8000b58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b52:	2001      	movs	r0, #1
 8000b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b58:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <HAL_RCC_ClockConfig+0x124>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	f002 020f 	and.w	r2, r2, #15
 8000b60:	428a      	cmp	r2, r1
 8000b62:	d328      	bcc.n	8000bb6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b64:	6821      	ldr	r1, [r4, #0]
 8000b66:	078f      	lsls	r7, r1, #30
 8000b68:	d42d      	bmi.n	8000bc6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b6a:	07c8      	lsls	r0, r1, #31
 8000b6c:	d440      	bmi.n	8000bf0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b6e:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <HAL_RCC_ClockConfig+0x124>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	f002 020f 	and.w	r2, r2, #15
 8000b76:	4295      	cmp	r5, r2
 8000b78:	d366      	bcc.n	8000c48 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	0751      	lsls	r1, r2, #29
 8000b7e:	d46c      	bmi.n	8000c5a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b80:	0713      	lsls	r3, r2, #28
 8000b82:	d507      	bpl.n	8000b94 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b84:	4a3a      	ldr	r2, [pc, #232]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000b86:	6921      	ldr	r1, [r4, #16]
 8000b88:	6893      	ldr	r3, [r2, #8]
 8000b8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b94:	f7ff ffaa 	bl	8000aec <HAL_RCC_GetSysClockFreq>
 8000b98:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000b9a:	4a36      	ldr	r2, [pc, #216]	; (8000c74 <HAL_RCC_ClockConfig+0x12c>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	40d8      	lsrs	r0, r3
 8000ba6:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <HAL_RCC_ClockConfig+0x130>)
 8000ba8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f002 f968 	bl	8002e80 <HAL_InitTick>
  return HAL_OK;
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	d1c6      	bne.n	8000b52 <HAL_RCC_ClockConfig+0xa>
 8000bc4:	e7ce      	b.n	8000b64 <HAL_RCC_ClockConfig+0x1c>
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bc8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bcc:	bf1e      	ittt	ne
 8000bce:	689a      	ldrne	r2, [r3, #8]
 8000bd0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bd4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bd6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bd8:	bf42      	ittt	mi
 8000bda:	689a      	ldrmi	r2, [r3, #8]
 8000bdc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000be0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	68a0      	ldr	r0, [r4, #8]
 8000be6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bea:	4302      	orrs	r2, r0
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	e7bc      	b.n	8000b6a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bf0:	6862      	ldr	r2, [r4, #4]
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000bf4:	2a01      	cmp	r2, #1
 8000bf6:	d11d      	bne.n	8000c34 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfe:	d0a8      	beq.n	8000b52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c00:	4e1b      	ldr	r6, [pc, #108]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000c02:	68b3      	ldr	r3, [r6, #8]
 8000c04:	f023 0303 	bic.w	r3, r3, #3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c0c:	f7ff fc96 	bl	800053c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c10:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c14:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c16:	68b3      	ldr	r3, [r6, #8]
 8000c18:	6862      	ldr	r2, [r4, #4]
 8000c1a:	f003 030c 	and.w	r3, r3, #12
 8000c1e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c22:	d0a4      	beq.n	8000b6e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c24:	f7ff fc8a 	bl	800053c <HAL_GetTick>
 8000c28:	1bc0      	subs	r0, r0, r7
 8000c2a:	4540      	cmp	r0, r8
 8000c2c:	d9f3      	bls.n	8000c16 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c2e:	2003      	movs	r0, #3
}
 8000c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c34:	1e91      	subs	r1, r2, #2
 8000c36:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c38:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c3a:	d802      	bhi.n	8000c42 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c3c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c40:	e7dd      	b.n	8000bfe <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c42:	f013 0f02 	tst.w	r3, #2
 8000c46:	e7da      	b.n	8000bfe <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c48:	b2ea      	uxtb	r2, r5
 8000c4a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	429d      	cmp	r5, r3
 8000c54:	f47f af7d 	bne.w	8000b52 <HAL_RCC_ClockConfig+0xa>
 8000c58:	e78f      	b.n	8000b7a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c5a:	4905      	ldr	r1, [pc, #20]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000c5c:	68e0      	ldr	r0, [r4, #12]
 8000c5e:	688b      	ldr	r3, [r1, #8]
 8000c60:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c64:	4303      	orrs	r3, r0
 8000c66:	608b      	str	r3, [r1, #8]
 8000c68:	e78a      	b.n	8000b80 <HAL_RCC_ClockConfig+0x38>
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00
 8000c70:	40023800 	.word	0x40023800
 8000c74:	080031ea 	.word	0x080031ea
 8000c78:	20000008 	.word	0x20000008

08000c7c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c7c:	4b01      	ldr	r3, [pc, #4]	; (8000c84 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008

08000c88 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c96:	6810      	ldr	r0, [r2, #0]
}
 8000c98:	40d8      	lsrs	r0, r3
 8000c9a:	4770      	bx	lr
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	080031fa 	.word	0x080031fa
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000cb2:	5cd3      	ldrb	r3, [r2, r3]
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000cb6:	6810      	ldr	r0, [r2, #0]
}
 8000cb8:	40d8      	lsrs	r0, r3
 8000cba:	4770      	bx	lr
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	080031fa 	.word	0x080031fa
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_RCC_GetClockConfig+0x34>)
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	f002 0203 	and.w	r2, r2, #3
 8000cd4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000cdc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000ce4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000cee:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_RCC_GetClockConfig+0x38>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	600b      	str	r3, [r1, #0]
 8000cfa:	4770      	bx	lr
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d04:	6a03      	ldr	r3, [r0, #32]
 8000d06:	f023 0301 	bic.w	r3, r3, #1
 8000d0a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d0c:	6a03      	ldr	r3, [r0, #32]
{
 8000d0e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000d10:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000d12:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000d14:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000d16:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000d1a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000d1c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000d1e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000d22:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000d24:	4d0a      	ldr	r5, [pc, #40]	; (8000d50 <TIM_OC1_SetConfig+0x4c>)
 8000d26:	42a8      	cmp	r0, r5
 8000d28:	d10b      	bne.n	8000d42 <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000d2a:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d2c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000d2e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000d32:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d34:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000d36:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d3a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000d3c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000d40:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d42:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000d44:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000d46:	684a      	ldr	r2, [r1, #4]
 8000d48:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000d4a:	6203      	str	r3, [r0, #32]
 8000d4c:	bd70      	pop	{r4, r5, r6, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010000 	.word	0x40010000

08000d54 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000d54:	6a03      	ldr	r3, [r0, #32]
 8000d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d5a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d5c:	6a03      	ldr	r3, [r0, #32]
{
 8000d5e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000d60:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000d62:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000d64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000d66:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000d6a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d6c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000d6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d72:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000d76:	4d0b      	ldr	r5, [pc, #44]	; (8000da4 <TIM_OC3_SetConfig+0x50>)
 8000d78:	42a8      	cmp	r0, r5
 8000d7a:	d10d      	bne.n	8000d98 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000d7c:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d7e:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000d84:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000d88:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000d8a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d8e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d94:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d98:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000d9a:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000d9c:	684a      	ldr	r2, [r1, #4]
 8000d9e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000da0:	6203      	str	r3, [r0, #32]
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	40010000 	.word	0x40010000

08000da8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000da8:	6a03      	ldr	r3, [r0, #32]
 8000daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dae:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000db0:	6a03      	ldr	r3, [r0, #32]
{
 8000db2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000db4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000db6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000db8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000dba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000dbe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000dc2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000dc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000dc8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000dcc:	4d06      	ldr	r5, [pc, #24]	; (8000de8 <TIM_OC4_SetConfig+0x40>)
 8000dce:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000dd0:	bf02      	ittt	eq
 8000dd2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000dd4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000dd8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ddc:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000dde:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000de0:	684a      	ldr	r2, [r1, #4]
 8000de2:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000de4:	6203      	str	r3, [r0, #32]
 8000de6:	bd30      	pop	{r4, r5, pc}
 8000de8:	40010000 	.word	0x40010000

08000dec <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000dec:	6803      	ldr	r3, [r0, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	f042 0201 	orr.w	r2, r2, #1
 8000df4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	f042 0201 	orr.w	r2, r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
}
 8000dfe:	2000      	movs	r0, #0
 8000e00:	4770      	bx	lr

08000e02 <HAL_TIM_PWM_MspInit>:
 8000e02:	4770      	bx	lr

08000e04 <HAL_TIM_OC_DelayElapsedCallback>:
 8000e04:	4770      	bx	lr

08000e06 <HAL_TIM_IC_CaptureCallback>:
 8000e06:	4770      	bx	lr

08000e08 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000e08:	4770      	bx	lr

08000e0a <HAL_TIM_TriggerCallback>:
 8000e0a:	4770      	bx	lr

08000e0c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e0c:	6803      	ldr	r3, [r0, #0]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	0791      	lsls	r1, r2, #30
{
 8000e12:	b510      	push	{r4, lr}
 8000e14:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e16:	d50e      	bpl.n	8000e36 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	0792      	lsls	r2, r2, #30
 8000e1c:	d50b      	bpl.n	8000e36 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e1e:	f06f 0202 	mvn.w	r2, #2
 8000e22:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e24:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e26:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e28:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e2a:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e2c:	d077      	beq.n	8000f1e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000e2e:	f7ff ffea 	bl	8000e06 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e32:	2300      	movs	r3, #0
 8000e34:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	691a      	ldr	r2, [r3, #16]
 8000e3a:	0750      	lsls	r0, r2, #29
 8000e3c:	d510      	bpl.n	8000e60 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	0751      	lsls	r1, r2, #29
 8000e42:	d50d      	bpl.n	8000e60 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e44:	f06f 0204 	mvn.w	r2, #4
 8000e48:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e4a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e4c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e4e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e52:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000e54:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e56:	d068      	beq.n	8000f2a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e58:	f7ff ffd5 	bl	8000e06 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	0712      	lsls	r2, r2, #28
 8000e66:	d50f      	bpl.n	8000e88 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	0710      	lsls	r0, r2, #28
 8000e6c:	d50c      	bpl.n	8000e88 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e6e:	f06f 0208 	mvn.w	r2, #8
 8000e72:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e74:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e76:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e78:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e7a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000e7c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e7e:	d05a      	beq.n	8000f36 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e80:	f7ff ffc1 	bl	8000e06 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e84:	2300      	movs	r3, #0
 8000e86:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	06d2      	lsls	r2, r2, #27
 8000e8e:	d510      	bpl.n	8000eb2 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	06d0      	lsls	r0, r2, #27
 8000e94:	d50d      	bpl.n	8000eb2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e96:	f06f 0210 	mvn.w	r2, #16
 8000e9a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e9c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e9e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ea0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ea4:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000ea6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ea8:	d04b      	beq.n	8000f42 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000eaa:	f7ff ffac 	bl	8000e06 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	07d1      	lsls	r1, r2, #31
 8000eb8:	d508      	bpl.n	8000ecc <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	07d2      	lsls	r2, r2, #31
 8000ebe:	d505      	bpl.n	8000ecc <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ec0:	f06f 0201 	mvn.w	r2, #1
 8000ec4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f001 fef2 	bl	8002cb0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	0610      	lsls	r0, r2, #24
 8000ed2:	d508      	bpl.n	8000ee6 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	0611      	lsls	r1, r2, #24
 8000ed8:	d505      	bpl.n	8000ee6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000eda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000ede:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f000 f966 	bl	80011b2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	0652      	lsls	r2, r2, #25
 8000eec:	d508      	bpl.n	8000f00 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	0650      	lsls	r0, r2, #25
 8000ef2:	d505      	bpl.n	8000f00 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000ef8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff ff85 	bl	8000e0a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	0691      	lsls	r1, r2, #26
 8000f06:	d522      	bpl.n	8000f4e <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	0692      	lsls	r2, r2, #26
 8000f0c:	d51f      	bpl.n	8000f4e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f0e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000f12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f14:	611a      	str	r2, [r3, #16]
}
 8000f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000f1a:	f000 b949 	b.w	80011b0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f1e:	f7ff ff71 	bl	8000e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f22:	4620      	mov	r0, r4
 8000f24:	f7ff ff70 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f28:	e783      	b.n	8000e32 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f2a:	f7ff ff6b 	bl	8000e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f7ff ff6a 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f34:	e792      	b.n	8000e5c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f36:	f7ff ff65 	bl	8000e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f7ff ff64 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f40:	e7a0      	b.n	8000e84 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f42:	f7ff ff5f 	bl	8000e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f46:	4620      	mov	r0, r4
 8000f48:	f7ff ff5e 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f4c:	e7af      	b.n	8000eae <HAL_TIM_IRQHandler+0xa2>
 8000f4e:	bd10      	pop	{r4, pc}

08000f50 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000f50:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8000f52:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000f54:	4290      	cmp	r0, r2
 8000f56:	d00e      	beq.n	8000f76 <TIM_Base_SetConfig+0x26>
 8000f58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f5c:	d00b      	beq.n	8000f76 <TIM_Base_SetConfig+0x26>
 8000f5e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f62:	4290      	cmp	r0, r2
 8000f64:	d007      	beq.n	8000f76 <TIM_Base_SetConfig+0x26>
 8000f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f6a:	4290      	cmp	r0, r2
 8000f6c:	d003      	beq.n	8000f76 <TIM_Base_SetConfig+0x26>
 8000f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f72:	4290      	cmp	r0, r2
 8000f74:	d119      	bne.n	8000faa <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8000f76:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f7c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f7e:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <TIM_Base_SetConfig+0x8c>)
 8000f80:	4290      	cmp	r0, r2
 8000f82:	d104      	bne.n	8000f8e <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f84:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	e018      	b.n	8000fc0 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f8e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f92:	d0f7      	beq.n	8000f84 <TIM_Base_SetConfig+0x34>
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <TIM_Base_SetConfig+0x90>)
 8000f96:	4290      	cmp	r0, r2
 8000f98:	d0f4      	beq.n	8000f84 <TIM_Base_SetConfig+0x34>
 8000f9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f9e:	4290      	cmp	r0, r2
 8000fa0:	d0f0      	beq.n	8000f84 <TIM_Base_SetConfig+0x34>
 8000fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fa6:	4290      	cmp	r0, r2
 8000fa8:	d0ec      	beq.n	8000f84 <TIM_Base_SetConfig+0x34>
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <TIM_Base_SetConfig+0x94>)
 8000fac:	4290      	cmp	r0, r2
 8000fae:	d0e9      	beq.n	8000f84 <TIM_Base_SetConfig+0x34>
 8000fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fb4:	4290      	cmp	r0, r2
 8000fb6:	d0e5      	beq.n	8000f84 <TIM_Base_SetConfig+0x34>
 8000fb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fbc:	4290      	cmp	r0, r2
 8000fbe:	d0e1      	beq.n	8000f84 <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 8000fc0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000fc2:	688b      	ldr	r3, [r1, #8]
 8000fc4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000fc6:	680b      	ldr	r3, [r1, #0]
 8000fc8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <TIM_Base_SetConfig+0x8c>)
 8000fcc:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000fce:	bf04      	itt	eq
 8000fd0:	690b      	ldreq	r3, [r1, #16]
 8000fd2:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	6143      	str	r3, [r0, #20]
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40000400 	.word	0x40000400
 8000fe4:	40014000 	.word	0x40014000

08000fe8 <HAL_TIM_Base_Init>:
{ 
 8000fe8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000fea:	4604      	mov	r4, r0
 8000fec:	b1a0      	cbz	r0, 8001018 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000fee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ff2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ff6:	b91b      	cbnz	r3, 8001000 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000ff8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000ffc:	f001 feaa 	bl	8002d54 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001000:	2302      	movs	r3, #2
 8001002:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001006:	6820      	ldr	r0, [r4, #0]
 8001008:	1d21      	adds	r1, r4, #4
 800100a:	f7ff ffa1 	bl	8000f50 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800100e:	2301      	movs	r3, #1
 8001010:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001014:	2000      	movs	r0, #0
 8001016:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001018:	2001      	movs	r0, #1
}
 800101a:	bd10      	pop	{r4, pc}

0800101c <HAL_TIM_PWM_Init>:
{
 800101c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800101e:	4604      	mov	r4, r0
 8001020:	b1a0      	cbz	r0, 800104c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001022:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001026:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800102a:	b91b      	cbnz	r3, 8001034 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800102c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001030:	f7ff fee7 	bl	8000e02 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001034:	2302      	movs	r3, #2
 8001036:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800103a:	6820      	ldr	r0, [r4, #0]
 800103c:	1d21      	adds	r1, r4, #4
 800103e:	f7ff ff87 	bl	8000f50 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001042:	2301      	movs	r3, #1
 8001044:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001048:	2000      	movs	r0, #0
 800104a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800104c:	2001      	movs	r0, #1
}  
 800104e:	bd10      	pop	{r4, pc}

08001050 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001050:	6a03      	ldr	r3, [r0, #32]
 8001052:	f023 0310 	bic.w	r3, r3, #16
 8001056:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001058:	6a03      	ldr	r3, [r0, #32]
{
 800105a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 800105c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800105e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001060:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001062:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001066:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800106a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800106c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001070:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001074:	4d0b      	ldr	r5, [pc, #44]	; (80010a4 <TIM_OC2_SetConfig+0x54>)
 8001076:	42a8      	cmp	r0, r5
 8001078:	d10d      	bne.n	8001096 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800107a:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800107c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800107e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001082:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001086:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001088:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800108c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800108e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001092:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001096:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001098:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800109a:	684a      	ldr	r2, [r1, #4]
 800109c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800109e:	6203      	str	r3, [r0, #32]
 80010a0:	bd70      	pop	{r4, r5, r6, pc}
 80010a2:	bf00      	nop
 80010a4:	40010000 	.word	0x40010000

080010a8 <HAL_TIM_PWM_ConfigChannel>:
{
 80010a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80010aa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010ae:	2b01      	cmp	r3, #1
{
 80010b0:	4604      	mov	r4, r0
 80010b2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80010b6:	d025      	beq.n	8001104 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80010b8:	2301      	movs	r3, #1
 80010ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80010be:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 80010c2:	2a0c      	cmp	r2, #12
 80010c4:	d818      	bhi.n	80010f8 <HAL_TIM_PWM_ConfigChannel+0x50>
 80010c6:	e8df f002 	tbb	[pc, r2]
 80010ca:	1707      	.short	0x1707
 80010cc:	171e1717 	.word	0x171e1717
 80010d0:	172f1717 	.word	0x172f1717
 80010d4:	1717      	.short	0x1717
 80010d6:	40          	.byte	0x40
 80010d7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80010d8:	6820      	ldr	r0, [r4, #0]
 80010da:	f7ff fe13 	bl	8000d04 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80010de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80010e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80010e2:	699a      	ldr	r2, [r3, #24]
 80010e4:	f042 0208 	orr.w	r2, r2, #8
 80010e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80010ea:	699a      	ldr	r2, [r3, #24]
 80010ec:	f022 0204 	bic.w	r2, r2, #4
 80010f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80010f6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80010f8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80010fa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80010fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001100:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001104:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001106:	6820      	ldr	r0, [r4, #0]
 8001108:	f7ff ffa2 	bl	8001050 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800110c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800110e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001110:	699a      	ldr	r2, [r3, #24]
 8001112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001118:	699a      	ldr	r2, [r3, #24]
 800111a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800111e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001120:	699a      	ldr	r2, [r3, #24]
 8001122:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001126:	e7e6      	b.n	80010f6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001128:	6820      	ldr	r0, [r4, #0]
 800112a:	f7ff fe13 	bl	8000d54 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800112e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001130:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001132:	69da      	ldr	r2, [r3, #28]
 8001134:	f042 0208 	orr.w	r2, r2, #8
 8001138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800113a:	69da      	ldr	r2, [r3, #28]
 800113c:	f022 0204 	bic.w	r2, r2, #4
 8001140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001142:	69da      	ldr	r2, [r3, #28]
 8001144:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001146:	61da      	str	r2, [r3, #28]
    break;
 8001148:	e7d6      	b.n	80010f8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800114a:	6820      	ldr	r0, [r4, #0]
 800114c:	f7ff fe2c 	bl	8000da8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001150:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001152:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001154:	69da      	ldr	r2, [r3, #28]
 8001156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800115a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800115c:	69da      	ldr	r2, [r3, #28]
 800115e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001162:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001164:	69da      	ldr	r2, [r3, #28]
 8001166:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800116a:	e7ec      	b.n	8001146 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800116c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800116c:	6a03      	ldr	r3, [r0, #32]
{
 800116e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001170:	2401      	movs	r4, #1
 8001172:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001174:	ea23 0304 	bic.w	r3, r3, r4
 8001178:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800117a:	6a03      	ldr	r3, [r0, #32]
 800117c:	408a      	lsls	r2, r1
 800117e:	431a      	orrs	r2, r3
 8001180:	6202      	str	r2, [r0, #32]
 8001182:	bd10      	pop	{r4, pc}

08001184 <HAL_TIM_PWM_Start>:
{
 8001184:	b510      	push	{r4, lr}
 8001186:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001188:	2201      	movs	r2, #1
 800118a:	6800      	ldr	r0, [r0, #0]
 800118c:	f7ff ffee 	bl	800116c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	4a06      	ldr	r2, [pc, #24]	; (80011ac <HAL_TIM_PWM_Start+0x28>)
 8001194:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001196:	bf02      	ittt	eq
 8001198:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800119a:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800119e:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
} 
 80011a8:	2000      	movs	r0, #0
 80011aa:	bd10      	pop	{r4, pc}
 80011ac:	40010000 	.word	0x40010000

080011b0 <HAL_TIMEx_CommutationCallback>:
 80011b0:	4770      	bx	lr

080011b2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80011b2:	4770      	bx	lr

080011b4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80011b8:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80011ba:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80011bc:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011be:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80011c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80011c4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80011c6:	6133      	str	r3, [r6, #16]
{
 80011c8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011ca:	6883      	ldr	r3, [r0, #8]
 80011cc:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80011ce:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011d0:	4303      	orrs	r3, r0
 80011d2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80011d4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011d8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80011da:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011de:	430b      	orrs	r3, r1
 80011e0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80011e2:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80011e4:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80011e6:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80011e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80011ec:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011ee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80011f2:	6173      	str	r3, [r6, #20]
 80011f4:	4b7a      	ldr	r3, [pc, #488]	; (80013e0 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011f6:	d17c      	bne.n	80012f2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80011f8:	429e      	cmp	r6, r3
 80011fa:	d003      	beq.n	8001204 <UART_SetConfig+0x50>
 80011fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001200:	429e      	cmp	r6, r3
 8001202:	d144      	bne.n	800128e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001204:	f7ff fd50 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 8001208:	2519      	movs	r5, #25
 800120a:	fb05 f300 	mul.w	r3, r5, r0
 800120e:	6860      	ldr	r0, [r4, #4]
 8001210:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001214:	0040      	lsls	r0, r0, #1
 8001216:	fbb3 f3f0 	udiv	r3, r3, r0
 800121a:	fbb3 f3f9 	udiv	r3, r3, r9
 800121e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001222:	f7ff fd41 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 8001226:	6863      	ldr	r3, [r4, #4]
 8001228:	4368      	muls	r0, r5
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001230:	f7ff fd3a 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 8001234:	6863      	ldr	r3, [r4, #4]
 8001236:	4368      	muls	r0, r5
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fbb0 f3f3 	udiv	r3, r0, r3
 800123e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001242:	fb09 7313 	mls	r3, r9, r3, r7
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	3332      	adds	r3, #50	; 0x32
 800124a:	fbb3 f3f9 	udiv	r3, r3, r9
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001254:	f7ff fd28 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 8001258:	6862      	ldr	r2, [r4, #4]
 800125a:	4368      	muls	r0, r5
 800125c:	0052      	lsls	r2, r2, #1
 800125e:	fbb0 faf2 	udiv	sl, r0, r2
 8001262:	f7ff fd21 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001266:	6863      	ldr	r3, [r4, #4]
 8001268:	4368      	muls	r0, r5
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001270:	fbb3 f3f9 	udiv	r3, r3, r9
 8001274:	fb09 a313 	mls	r3, r9, r3, sl
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	3332      	adds	r3, #50	; 0x32
 800127c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001286:	443b      	add	r3, r7
 8001288:	60b3      	str	r3, [r6, #8]
 800128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800128e:	f7ff fcfb 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 8001292:	2519      	movs	r5, #25
 8001294:	fb05 f300 	mul.w	r3, r5, r0
 8001298:	6860      	ldr	r0, [r4, #4]
 800129a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800129e:	0040      	lsls	r0, r0, #1
 80012a0:	fbb3 f3f0 	udiv	r3, r3, r0
 80012a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80012a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80012ac:	f7ff fcec 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 80012b0:	6863      	ldr	r3, [r4, #4]
 80012b2:	4368      	muls	r0, r5
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fbb0 f7f3 	udiv	r7, r0, r3
 80012ba:	f7ff fce5 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 80012be:	6863      	ldr	r3, [r4, #4]
 80012c0:	4368      	muls	r0, r5
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80012cc:	fb09 7313 	mls	r3, r9, r3, r7
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	3332      	adds	r3, #50	; 0x32
 80012d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80012de:	f7ff fcd3 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 80012e2:	6862      	ldr	r2, [r4, #4]
 80012e4:	4368      	muls	r0, r5
 80012e6:	0052      	lsls	r2, r2, #1
 80012e8:	fbb0 faf2 	udiv	sl, r0, r2
 80012ec:	f7ff fccc 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 80012f0:	e7b9      	b.n	8001266 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80012f2:	429e      	cmp	r6, r3
 80012f4:	d002      	beq.n	80012fc <UART_SetConfig+0x148>
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <UART_SetConfig+0x230>)
 80012f8:	429e      	cmp	r6, r3
 80012fa:	d140      	bne.n	800137e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80012fc:	f7ff fcd4 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 8001300:	6867      	ldr	r7, [r4, #4]
 8001302:	2519      	movs	r5, #25
 8001304:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001308:	fb05 f300 	mul.w	r3, r5, r0
 800130c:	00bf      	lsls	r7, r7, #2
 800130e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001312:	fbb3 f3f9 	udiv	r3, r3, r9
 8001316:	011f      	lsls	r7, r3, #4
 8001318:	f7ff fcc6 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 800131c:	6863      	ldr	r3, [r4, #4]
 800131e:	4368      	muls	r0, r5
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	fbb0 f8f3 	udiv	r8, r0, r3
 8001326:	f7ff fcbf 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	4368      	muls	r0, r5
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fbb0 f3f3 	udiv	r3, r0, r3
 8001334:	fbb3 f3f9 	udiv	r3, r3, r9
 8001338:	fb09 8313 	mls	r3, r9, r3, r8
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	3332      	adds	r3, #50	; 0x32
 8001340:	fbb3 f3f9 	udiv	r3, r3, r9
 8001344:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001348:	f7ff fcae 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 800134c:	6862      	ldr	r2, [r4, #4]
 800134e:	4368      	muls	r0, r5
 8001350:	0092      	lsls	r2, r2, #2
 8001352:	fbb0 faf2 	udiv	sl, r0, r2
 8001356:	f7ff fca7 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800135a:	6863      	ldr	r3, [r4, #4]
 800135c:	4368      	muls	r0, r5
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	fbb0 f3f3 	udiv	r3, r0, r3
 8001364:	fbb3 f3f9 	udiv	r3, r3, r9
 8001368:	fb09 a313 	mls	r3, r9, r3, sl
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	3332      	adds	r3, #50	; 0x32
 8001370:	fbb3 f3f9 	udiv	r3, r3, r9
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	ea43 0308 	orr.w	r3, r3, r8
 800137c:	e783      	b.n	8001286 <UART_SetConfig+0xd2>
 800137e:	f7ff fc83 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 8001382:	6867      	ldr	r7, [r4, #4]
 8001384:	2519      	movs	r5, #25
 8001386:	f04f 0964 	mov.w	r9, #100	; 0x64
 800138a:	fb05 f300 	mul.w	r3, r5, r0
 800138e:	00bf      	lsls	r7, r7, #2
 8001390:	fbb3 f3f7 	udiv	r3, r3, r7
 8001394:	fbb3 f3f9 	udiv	r3, r3, r9
 8001398:	011f      	lsls	r7, r3, #4
 800139a:	f7ff fc75 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 800139e:	6863      	ldr	r3, [r4, #4]
 80013a0:	4368      	muls	r0, r5
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	fbb0 f8f3 	udiv	r8, r0, r3
 80013a8:	f7ff fc6e 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 80013ac:	6863      	ldr	r3, [r4, #4]
 80013ae:	4368      	muls	r0, r5
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b6:	fbb3 f3f9 	udiv	r3, r3, r9
 80013ba:	fb09 8313 	mls	r3, r9, r3, r8
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	3332      	adds	r3, #50	; 0x32
 80013c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80013c6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80013ca:	f7ff fc5d 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 80013ce:	6862      	ldr	r2, [r4, #4]
 80013d0:	4368      	muls	r0, r5
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	fbb0 faf2 	udiv	sl, r0, r2
 80013d8:	f7ff fc56 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 80013dc:	e7bd      	b.n	800135a <UART_SetConfig+0x1a6>
 80013de:	bf00      	nop
 80013e0:	40011000 	.word	0x40011000
 80013e4:	40011400 	.word	0x40011400

080013e8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ea:	4604      	mov	r4, r0
 80013ec:	460e      	mov	r6, r1
 80013ee:	4617      	mov	r7, r2
 80013f0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80013f2:	6821      	ldr	r1, [r4, #0]
 80013f4:	680b      	ldr	r3, [r1, #0]
 80013f6:	ea36 0303 	bics.w	r3, r6, r3
 80013fa:	d101      	bne.n	8001400 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80013fc:	2000      	movs	r0, #0
}
 80013fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001400:	1c6b      	adds	r3, r5, #1
 8001402:	d0f7      	beq.n	80013f4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001404:	b995      	cbnz	r5, 800142c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800140e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001418:	2320      	movs	r3, #32
 800141a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800141e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001422:	2300      	movs	r3, #0
 8001424:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001428:	2003      	movs	r0, #3
 800142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800142c:	f7ff f886 	bl	800053c <HAL_GetTick>
 8001430:	1bc0      	subs	r0, r0, r7
 8001432:	4285      	cmp	r5, r0
 8001434:	d2dd      	bcs.n	80013f2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001436:	e7e6      	b.n	8001406 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001438 <HAL_UART_Init>:
{
 8001438:	b510      	push	{r4, lr}
  if(huart == NULL)
 800143a:	4604      	mov	r4, r0
 800143c:	b340      	cbz	r0, 8001490 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800143e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001442:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001446:	b91b      	cbnz	r3, 8001450 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001448:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800144c:	f001 fcce 	bl	8002dec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001450:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001452:	2324      	movs	r3, #36	; 0x24
 8001454:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001458:	68d3      	ldr	r3, [r2, #12]
 800145a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800145e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff fea7 	bl	80011b4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800146e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001476:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800147e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001480:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001482:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001484:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001486:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800148a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800148e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001490:	2001      	movs	r0, #1
}
 8001492:	bd10      	pop	{r4, pc}

08001494 <HAL_UART_Receive>:
{ 
 8001494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001498:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY) 
 800149a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800149e:	2b20      	cmp	r3, #32
{ 
 80014a0:	4604      	mov	r4, r0
 80014a2:	460d      	mov	r5, r1
 80014a4:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 80014a6:	d152      	bne.n	800154e <HAL_UART_Receive+0xba>
    if((pData == NULL ) || (Size == 0)) 
 80014a8:	2900      	cmp	r1, #0
 80014aa:	d04d      	beq.n	8001548 <HAL_UART_Receive+0xb4>
 80014ac:	2a00      	cmp	r2, #0
 80014ae:	d04b      	beq.n	8001548 <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 80014b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d04a      	beq.n	800154e <HAL_UART_Receive+0xba>
 80014b8:	2301      	movs	r3, #1
 80014ba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014be:	2300      	movs	r3, #0
 80014c0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014c2:	2322      	movs	r3, #34	; 0x22
 80014c4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80014c8:	f7ff f838 	bl	800053c <HAL_GetTick>
    huart->RxXferSize = Size; 
 80014cc:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 80014d0:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 80014d2:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 80014d6:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80014d8:	b280      	uxth	r0, r0
 80014da:	b930      	cbnz	r0, 80014ea <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 80014dc:	2320      	movs	r3, #32
 80014de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 80014e2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80014e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 80014ea:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014f2:	68a3      	ldr	r3, [r4, #8]
 80014f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80014f8:	4632      	mov	r2, r6
 80014fa:	463b      	mov	r3, r7
 80014fc:	f04f 0120 	mov.w	r1, #32
 8001500:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001502:	d112      	bne.n	800152a <HAL_UART_Receive+0x96>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001504:	f7ff ff70 	bl	80013e8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001508:	b110      	cbz	r0, 8001510 <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 800150a:	2003      	movs	r0, #3
 800150c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001510:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001512:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001514:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001516:	b922      	cbnz	r2, 8001522 <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800151c:	f825 3b02 	strh.w	r3, [r5], #2
 8001520:	e7d9      	b.n	80014d6 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f825 3b01 	strh.w	r3, [r5], #1
 8001528:	e7d5      	b.n	80014d6 <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800152a:	f7ff ff5d 	bl	80013e8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800152e:	2800      	cmp	r0, #0
 8001530:	d1eb      	bne.n	800150a <HAL_UART_Receive+0x76>
 8001532:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001534:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	1c6a      	adds	r2, r5, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 800153a:	b911      	cbnz	r1, 8001542 <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800153c:	702b      	strb	r3, [r5, #0]
 800153e:	4615      	mov	r5, r2
 8001540:	e7c9      	b.n	80014d6 <HAL_UART_Receive+0x42>
 8001542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001546:	e7f9      	b.n	800153c <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 8001548:	2001      	movs	r0, #1
 800154a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;   
 800154e:	2002      	movs	r0, #2
}
 8001550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001554 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001554:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001556:	f000 fe5f 	bl	8002218 <vTaskStartScheduler>
  
  return osOK;
}
 800155a:	2000      	movs	r0, #0
 800155c:	bd08      	pop	{r3, pc}

0800155e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800155e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001560:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001564:	8a02      	ldrh	r2, [r0, #16]
{
 8001566:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001568:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 800156c:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800156e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001570:	bf14      	ite	ne
 8001572:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001574:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001576:	a803      	add	r0, sp, #12
 8001578:	9001      	str	r0, [sp, #4]
 800157a:	9400      	str	r4, [sp, #0]
 800157c:	4628      	mov	r0, r5
 800157e:	f000 fd7b 	bl	8002078 <xTaskCreate>
 8001582:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001584:	bf0c      	ite	eq
 8001586:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001588:	2000      	movne	r0, #0
}
 800158a:	b005      	add	sp, #20
 800158c:	bd30      	pop	{r4, r5, pc}

0800158e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800158e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001590:	2800      	cmp	r0, #0
 8001592:	bf08      	it	eq
 8001594:	2001      	moveq	r0, #1
 8001596:	f000 ff8d 	bl	80024b4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800159a:	2000      	movs	r0, #0
 800159c:	bd08      	pop	{r3, pc}

0800159e <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800159e:	2001      	movs	r0, #1
 80015a0:	f000 bc32 	b.w	8001e08 <xQueueCreateMutex>

080015a4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80015a4:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015a6:	f001 f8c9 	bl	800273c <xTaskGetSchedulerState>
 80015aa:	2801      	cmp	r0, #1
 80015ac:	d003      	beq.n	80015b6 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80015ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80015b2:	f000 b907 	b.w	80017c4 <xPortSysTickHandler>
 80015b6:	bd08      	pop	{r3, pc}

080015b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015b8:	f100 0308 	add.w	r3, r0, #8
 80015bc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80015be:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015c2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015c4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80015c6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80015c8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80015ca:	6003      	str	r3, [r0, #0]
 80015cc:	4770      	bx	lr

080015ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	6103      	str	r3, [r0, #16]
 80015d2:	4770      	bx	lr

080015d4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80015d4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80015d6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80015e0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80015e2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80015e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80015e6:	3301      	adds	r3, #1
 80015e8:	6003      	str	r3, [r0, #0]
 80015ea:	4770      	bx	lr

080015ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80015ec:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80015ee:	1c53      	adds	r3, r2, #1
{
 80015f0:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80015f2:	d10a      	bne.n	800160a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80015f4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80015fa:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80015fc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80015fe:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001600:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001602:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001604:	3301      	adds	r3, #1
 8001606:	6003      	str	r3, [r0, #0]
 8001608:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800160a:	f100 0308 	add.w	r3, r0, #8
 800160e:	685c      	ldr	r4, [r3, #4]
 8001610:	6825      	ldr	r5, [r4, #0]
 8001612:	42aa      	cmp	r2, r5
 8001614:	d3ef      	bcc.n	80015f6 <vListInsert+0xa>
 8001616:	4623      	mov	r3, r4
 8001618:	e7f9      	b.n	800160e <vListInsert+0x22>

0800161a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800161a:	6841      	ldr	r1, [r0, #4]
 800161c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800161e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001620:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001622:	6882      	ldr	r2, [r0, #8]
 8001624:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800162a:	bf08      	it	eq
 800162c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800162e:	2200      	movs	r2, #0
 8001630:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	3801      	subs	r0, #1
 8001636:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001638:	4770      	bx	lr
	...

0800163c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <prvTaskExitError+0x2c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	d008      	beq.n	8001656 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	e7fe      	b.n	8001654 <prvTaskExitError+0x18>
 8001656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800165a:	f383 8811 	msr	BASEPRI, r3
 800165e:	f3bf 8f6f 	isb	sy
 8001662:	f3bf 8f4f 	dsb	sy
 8001666:	e7fe      	b.n	8001666 <prvTaskExitError+0x2a>
 8001668:	20000004 	.word	0x20000004

0800166c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <prvPortStartFirstTask+0x1c>)
 800166e:	6800      	ldr	r0, [r0, #0]
 8001670:	6800      	ldr	r0, [r0, #0]
 8001672:	f380 8808 	msr	MSP, r0
 8001676:	b662      	cpsie	i
 8001678:	b661      	cpsie	f
 800167a:	f3bf 8f4f 	dsb	sy
 800167e:	f3bf 8f6f 	isb	sy
 8001682:	df00      	svc	0
 8001684:	bf00      	nop
 8001686:	0000      	.short	0x0000
 8001688:	e000ed08 	.word	0xe000ed08

0800168c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800168c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800169c <vPortEnableVFP+0x10>
 8001690:	6801      	ldr	r1, [r0, #0]
 8001692:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001696:	6001      	str	r1, [r0, #0]
 8001698:	4770      	bx	lr
 800169a:	0000      	.short	0x0000
 800169c:	e000ed88 	.word	0xe000ed88

080016a0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80016a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016a4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <pxPortInitialiseStack+0x28>)
 80016aa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80016ae:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80016b2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80016b6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80016ba:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80016be:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80016c2:	3844      	subs	r0, #68	; 0x44
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	0800163d 	.word	0x0800163d
 80016cc:	00000000 	.word	0x00000000

080016d0 <SVC_Handler>:
	__asm volatile (
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <pxCurrentTCBConst2>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	6808      	ldr	r0, [r1, #0]
 80016d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016da:	f380 8809 	msr	PSP, r0
 80016de:	f3bf 8f6f 	isb	sy
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f380 8811 	msr	BASEPRI, r0
 80016ea:	4770      	bx	lr
 80016ec:	f3af 8000 	nop.w

080016f0 <pxCurrentTCBConst2>:
 80016f0:	20003e18 	.word	0x20003e18

080016f4 <vPortEnterCritical>:
 80016f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f8:	f383 8811 	msr	BASEPRI, r3
 80016fc:	f3bf 8f6f 	isb	sy
 8001700:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <vPortEnterCritical+0x3c>)
 8001706:	6813      	ldr	r3, [r2, #0]
 8001708:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800170a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800170c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800170e:	d10d      	bne.n	800172c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <vPortEnterCritical+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001718:	d008      	beq.n	800172c <vPortEnterCritical+0x38>
 800171a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800171e:	f383 8811 	msr	BASEPRI, r3
 8001722:	f3bf 8f6f 	isb	sy
 8001726:	f3bf 8f4f 	dsb	sy
 800172a:	e7fe      	b.n	800172a <vPortEnterCritical+0x36>
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000004 	.word	0x20000004
 8001734:	e000ed04 	.word	0xe000ed04

08001738 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001738:	4a08      	ldr	r2, [pc, #32]	; (800175c <vPortExitCritical+0x24>)
 800173a:	6813      	ldr	r3, [r2, #0]
 800173c:	b943      	cbnz	r3, 8001750 <vPortExitCritical+0x18>
 800173e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001742:	f383 8811 	msr	BASEPRI, r3
 8001746:	f3bf 8f6f 	isb	sy
 800174a:	f3bf 8f4f 	dsb	sy
 800174e:	e7fe      	b.n	800174e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001750:	3b01      	subs	r3, #1
 8001752:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001754:	b90b      	cbnz	r3, 800175a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001756:	f383 8811 	msr	BASEPRI, r3
 800175a:	4770      	bx	lr
 800175c:	20000004 	.word	0x20000004

08001760 <PendSV_Handler>:
	__asm volatile
 8001760:	f3ef 8009 	mrs	r0, PSP
 8001764:	f3bf 8f6f 	isb	sy
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <pxCurrentTCBConst>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f01e 0f10 	tst.w	lr, #16
 8001770:	bf08      	it	eq
 8001772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800177a:	6010      	str	r0, [r2, #0]
 800177c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001784:	f380 8811 	msr	BASEPRI, r0
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	f3bf 8f6f 	isb	sy
 8001790:	f000 feee 	bl	8002570 <vTaskSwitchContext>
 8001794:	f04f 0000 	mov.w	r0, #0
 8001798:	f380 8811 	msr	BASEPRI, r0
 800179c:	bc08      	pop	{r3}
 800179e:	6819      	ldr	r1, [r3, #0]
 80017a0:	6808      	ldr	r0, [r1, #0]
 80017a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a6:	f01e 0f10 	tst.w	lr, #16
 80017aa:	bf08      	it	eq
 80017ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80017b0:	f380 8809 	msr	PSP, r0
 80017b4:	f3bf 8f6f 	isb	sy
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w

080017c0 <pxCurrentTCBConst>:
 80017c0:	20003e18 	.word	0x20003e18

080017c4 <xPortSysTickHandler>:
{
 80017c4:	b508      	push	{r3, lr}
	__asm volatile
 80017c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ca:	f383 8811 	msr	BASEPRI, r3
 80017ce:	f3bf 8f6f 	isb	sy
 80017d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80017d6:	f000 fd63 	bl	80022a0 <xTaskIncrementTick>
 80017da:	b118      	cbz	r0, 80017e4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <xPortSysTickHandler+0x28>)
 80017de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80017e4:	2300      	movs	r3, #0
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	bd08      	pop	{r3, pc}
 80017ec:	e000ed04 	.word	0xe000ed04

080017f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <vPortSetupTimerInterrupt+0x1c>)
 80017f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <vPortSetupTimerInterrupt+0x20>)
 80017fe:	3b01      	subs	r3, #1
 8001800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <vPortSetupTimerInterrupt+0x24>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008
 8001810:	e000e014 	.word	0xe000e014
 8001814:	e000e010 	.word	0xe000e010

08001818 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <xPortStartScheduler+0xc8>)
 800181a:	4a32      	ldr	r2, [pc, #200]	; (80018e4 <xPortStartScheduler+0xcc>)
{
 800181c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800181e:	6819      	ldr	r1, [r3, #0]
 8001820:	4291      	cmp	r1, r2
 8001822:	d108      	bne.n	8001836 <xPortStartScheduler+0x1e>
	__asm volatile
 8001824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001828:	f383 8811 	msr	BASEPRI, r3
 800182c:	f3bf 8f6f 	isb	sy
 8001830:	f3bf 8f4f 	dsb	sy
 8001834:	e7fe      	b.n	8001834 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <xPortStartScheduler+0xd0>)
 800183a:	429a      	cmp	r2, r3
 800183c:	d108      	bne.n	8001850 <xPortStartScheduler+0x38>
 800183e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001842:	f383 8811 	msr	BASEPRI, r3
 8001846:	f3bf 8f6f 	isb	sy
 800184a:	f3bf 8f4f 	dsb	sy
 800184e:	e7fe      	b.n	800184e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <xPortStartScheduler+0xd4>)
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001858:	22ff      	movs	r2, #255	; 0xff
 800185a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800185c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800185e:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001866:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800186a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800186e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <xPortStartScheduler+0xdc>)
 8001872:	2207      	movs	r2, #7
 8001874:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001876:	2100      	movs	r1, #0
 8001878:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800187c:	0600      	lsls	r0, r0, #24
 800187e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001882:	d423      	bmi.n	80018cc <xPortStartScheduler+0xb4>
 8001884:	b101      	cbz	r1, 8001888 <xPortStartScheduler+0x70>
 8001886:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800188c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001890:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001892:	9b01      	ldr	r3, [sp, #4]
 8001894:	4a15      	ldr	r2, [pc, #84]	; (80018ec <xPortStartScheduler+0xd4>)
 8001896:	b2db      	uxtb	r3, r3
 8001898:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <xPortStartScheduler+0xe0>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80018a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80018aa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80018ac:	f7ff ffa0 	bl	80017f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <xPortStartScheduler+0xe4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80018b6:	f7ff fee9 	bl	800168c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80018ba:	4a11      	ldr	r2, [pc, #68]	; (8001900 <xPortStartScheduler+0xe8>)
 80018bc:	6813      	ldr	r3, [r2, #0]
 80018be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80018c2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80018c4:	f7ff fed2 	bl	800166c <prvPortStartFirstTask>
	prvTaskExitError();
 80018c8:	f7ff feb8 	bl	800163c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80018cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80018d0:	0052      	lsls	r2, r2, #1
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f88d 2003 	strb.w	r2, [sp, #3]
 80018d8:	2101      	movs	r1, #1
 80018da:	4622      	mov	r2, r4
 80018dc:	e7cc      	b.n	8001878 <xPortStartScheduler+0x60>
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00
 80018e4:	410fc271 	.word	0x410fc271
 80018e8:	410fc270 	.word	0x410fc270
 80018ec:	e000e400 	.word	0xe000e400
 80018f0:	200001f8 	.word	0x200001f8
 80018f4:	200001fc 	.word	0x200001fc
 80018f8:	e000ed20 	.word	0xe000ed20
 80018fc:	20000004 	.word	0x20000004
 8001900:	e000ef34 	.word	0xe000ef34

08001904 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001904:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <prvInsertBlockIntoFreeList+0x40>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4282      	cmp	r2, r0
 800190c:	d318      	bcc.n	8001940 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800190e:	685c      	ldr	r4, [r3, #4]
 8001910:	1919      	adds	r1, r3, r4
 8001912:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001914:	bf01      	itttt	eq
 8001916:	6841      	ldreq	r1, [r0, #4]
 8001918:	4618      	moveq	r0, r3
 800191a:	1909      	addeq	r1, r1, r4
 800191c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800191e:	6844      	ldr	r4, [r0, #4]
 8001920:	1901      	adds	r1, r0, r4
 8001922:	428a      	cmp	r2, r1
 8001924:	d107      	bne.n	8001936 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <prvInsertBlockIntoFreeList+0x44>)
 8001928:	6809      	ldr	r1, [r1, #0]
 800192a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800192c:	bf1f      	itttt	ne
 800192e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001930:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001932:	1909      	addne	r1, r1, r4
 8001934:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001936:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001938:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800193a:	bf18      	it	ne
 800193c:	6018      	strne	r0, [r3, #0]
 800193e:	bd10      	pop	{r4, pc}
 8001940:	4613      	mov	r3, r2
 8001942:	e7e1      	b.n	8001908 <prvInsertBlockIntoFreeList+0x4>
 8001944:	20003e10 	.word	0x20003e10
 8001948:	20000200 	.word	0x20000200

0800194c <pvPortMalloc>:
{
 800194c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001950:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001952:	f000 fc9d 	bl	8002290 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001956:	493e      	ldr	r1, [pc, #248]	; (8001a50 <pvPortMalloc+0x104>)
 8001958:	4d3e      	ldr	r5, [pc, #248]	; (8001a54 <pvPortMalloc+0x108>)
 800195a:	680b      	ldr	r3, [r1, #0]
 800195c:	bb0b      	cbnz	r3, 80019a2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800195e:	4a3e      	ldr	r2, [pc, #248]	; (8001a58 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001960:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001962:	bf1f      	itttt	ne
 8001964:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001966:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800196a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800196e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001970:	bf14      	ite	ne
 8001972:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001974:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001978:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800197a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800197c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001980:	4e36      	ldr	r6, [pc, #216]	; (8001a5c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001982:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001984:	2000      	movs	r0, #0
 8001986:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001988:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800198a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800198c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800198e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001990:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001992:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001994:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001996:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001998:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <pvPortMalloc+0x118>)
 800199a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800199c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019a0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80019a2:	682f      	ldr	r7, [r5, #0]
 80019a4:	4227      	tst	r7, r4
 80019a6:	d116      	bne.n	80019d6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80019a8:	2c00      	cmp	r4, #0
 80019aa:	d041      	beq.n	8001a30 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80019ac:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80019b0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80019b2:	bf1c      	itt	ne
 80019b4:	f023 0307 	bicne.w	r3, r3, #7
 80019b8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80019ba:	b163      	cbz	r3, 80019d6 <pvPortMalloc+0x8a>
 80019bc:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <pvPortMalloc+0x118>)
 80019be:	6816      	ldr	r6, [r2, #0]
 80019c0:	42b3      	cmp	r3, r6
 80019c2:	4690      	mov	r8, r2
 80019c4:	d807      	bhi.n	80019d6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80019c6:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <pvPortMalloc+0x110>)
 80019c8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80019ca:	6868      	ldr	r0, [r5, #4]
 80019cc:	4283      	cmp	r3, r0
 80019ce:	d804      	bhi.n	80019da <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80019d0:	6809      	ldr	r1, [r1, #0]
 80019d2:	428d      	cmp	r5, r1
 80019d4:	d107      	bne.n	80019e6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80019d6:	2400      	movs	r4, #0
 80019d8:	e02a      	b.n	8001a30 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80019da:	682c      	ldr	r4, [r5, #0]
 80019dc:	2c00      	cmp	r4, #0
 80019de:	d0f7      	beq.n	80019d0 <pvPortMalloc+0x84>
 80019e0:	462a      	mov	r2, r5
 80019e2:	4625      	mov	r5, r4
 80019e4:	e7f1      	b.n	80019ca <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80019e6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80019e8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80019ea:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80019ec:	1ac2      	subs	r2, r0, r3
 80019ee:	2a10      	cmp	r2, #16
 80019f0:	d90f      	bls.n	8001a12 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80019f2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80019f4:	0741      	lsls	r1, r0, #29
 80019f6:	d008      	beq.n	8001a0a <pvPortMalloc+0xbe>
 80019f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fc:	f383 8811 	msr	BASEPRI, r3
 8001a00:	f3bf 8f6f 	isb	sy
 8001a04:	f3bf 8f4f 	dsb	sy
 8001a08:	e7fe      	b.n	8001a08 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a0a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001a0c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001a0e:	f7ff ff79 	bl	8001904 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a12:	4913      	ldr	r1, [pc, #76]	; (8001a60 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a14:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a16:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a18:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a1a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a1c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001a1e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a22:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001a26:	bf38      	it	cc
 8001a28:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a2a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a2c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001a2e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001a30:	f000 fcc8 	bl	80023c4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a34:	0763      	lsls	r3, r4, #29
 8001a36:	d008      	beq.n	8001a4a <pvPortMalloc+0xfe>
 8001a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a3c:	f383 8811 	msr	BASEPRI, r3
 8001a40:	f3bf 8f6f 	isb	sy
 8001a44:	f3bf 8f4f 	dsb	sy
 8001a48:	e7fe      	b.n	8001a48 <pvPortMalloc+0xfc>
}
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a50:	20000200 	.word	0x20000200
 8001a54:	20003e04 	.word	0x20003e04
 8001a58:	20000204 	.word	0x20000204
 8001a5c:	20003e10 	.word	0x20003e10
 8001a60:	20003e0c 	.word	0x20003e0c
 8001a64:	20003e08 	.word	0x20003e08

08001a68 <vPortFree>:
{
 8001a68:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	b370      	cbz	r0, 8001acc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001a6e:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <vPortFree+0x68>)
 8001a70:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	4213      	tst	r3, r2
 8001a78:	d108      	bne.n	8001a8c <vPortFree+0x24>
 8001a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7e:	f383 8811 	msr	BASEPRI, r3
 8001a82:	f3bf 8f6f 	isb	sy
 8001a86:	f3bf 8f4f 	dsb	sy
 8001a8a:	e7fe      	b.n	8001a8a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001a8c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001a90:	b141      	cbz	r1, 8001aa4 <vPortFree+0x3c>
 8001a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a96:	f383 8811 	msr	BASEPRI, r3
 8001a9a:	f3bf 8f6f 	isb	sy
 8001a9e:	f3bf 8f4f 	dsb	sy
 8001aa2:	e7fe      	b.n	8001aa2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001aa4:	ea23 0302 	bic.w	r3, r3, r2
 8001aa8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001aac:	f000 fbf0 	bl	8002290 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <vPortFree+0x6c>)
 8001ab2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001ab6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ab8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001abc:	440b      	add	r3, r1
 8001abe:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ac0:	f7ff ff20 	bl	8001904 <prvInsertBlockIntoFreeList>
}
 8001ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001ac8:	f000 bc7c 	b.w	80023c4 <xTaskResumeAll>
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	20003e04 	.word	0x20003e04
 8001ad4:	20003e08 	.word	0x20003e08

08001ad8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ad8:	b570      	push	{r4, r5, r6, lr}
 8001ada:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001adc:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ade:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8001ae0:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ae2:	b942      	cbnz	r2, 8001af6 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ae4:	6805      	ldr	r5, [r0, #0]
 8001ae6:	b99d      	cbnz	r5, 8001b10 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001ae8:	6840      	ldr	r0, [r0, #4]
 8001aea:	f000 fe7d 	bl	80027e8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001aee:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001af0:	3601      	adds	r6, #1
 8001af2:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001af6:	b96d      	cbnz	r5, 8001b14 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001af8:	6880      	ldr	r0, [r0, #8]
 8001afa:	f001 fa85 	bl	8003008 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001afe:	68a3      	ldr	r3, [r4, #8]
 8001b00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b02:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b04:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001b06:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d301      	bcc.n	8001b10 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001b10:	2000      	movs	r0, #0
 8001b12:	e7ed      	b.n	8001af0 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b14:	68c0      	ldr	r0, [r0, #12]
 8001b16:	f001 fa77 	bl	8003008 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b1c:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b1e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001b20:	425b      	negs	r3, r3
 8001b22:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b24:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001b26:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001b28:	bf3e      	ittt	cc
 8001b2a:	6862      	ldrcc	r2, [r4, #4]
 8001b2c:	189b      	addcc	r3, r3, r2
 8001b2e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001b30:	2d02      	cmp	r5, #2
 8001b32:	d1ed      	bne.n	8001b10 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b34:	b10e      	cbz	r6, 8001b3a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001b36:	3e01      	subs	r6, #1
 8001b38:	e7ea      	b.n	8001b10 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001b3a:	4630      	mov	r0, r6
 8001b3c:	e7d8      	b.n	8001af0 <prvCopyDataToQueue+0x18>

08001b3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001b44:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b46:	b162      	cbz	r2, 8001b62 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001b48:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001b4a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001b4c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001b4e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001b50:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001b52:	bf24      	itt	cs
 8001b54:	6819      	ldrcs	r1, [r3, #0]
 8001b56:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001b58:	68d9      	ldr	r1, [r3, #12]
	}
}
 8001b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001b5e:	f001 ba53 	b.w	8003008 <memcpy>
}
 8001b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001b6c:	f7ff fdc2 	bl	80016f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001b70:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b74:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001b78:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b7a:	2d00      	cmp	r5, #0
 8001b7c:	dc14      	bgt.n	8001ba8 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001b7e:	23ff      	movs	r3, #255	; 0xff
 8001b80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001b84:	f7ff fdd8 	bl	8001738 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001b88:	f7ff fdb4 	bl	80016f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001b8c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b90:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001b94:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b96:	2d00      	cmp	r5, #0
 8001b98:	dc12      	bgt.n	8001bc0 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001b9a:	23ff      	movs	r3, #255	; 0xff
 8001b9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001ba4:	f7ff bdc8 	b.w	8001738 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0e7      	beq.n	8001b7e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f000 fd32 	bl	8002618 <xTaskRemoveFromEventList>
 8001bb4:	b108      	cbz	r0, 8001bba <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001bb6:	f000 fdbb 	bl	8002730 <vTaskMissedYield>
 8001bba:	3d01      	subs	r5, #1
 8001bbc:	b26d      	sxtb	r5, r5
 8001bbe:	e7dc      	b.n	8001b7a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bc0:	6923      	ldr	r3, [r4, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0e9      	beq.n	8001b9a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f000 fd26 	bl	8002618 <xTaskRemoveFromEventList>
 8001bcc:	b108      	cbz	r0, 8001bd2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001bce:	f000 fdaf 	bl	8002730 <vTaskMissedYield>
 8001bd2:	3d01      	subs	r5, #1
 8001bd4:	b26d      	sxtb	r5, r5
 8001bd6:	e7de      	b.n	8001b96 <prvUnlockQueue+0x2e>

08001bd8 <xQueueGenericReset>:
{
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001bdc:	4604      	mov	r4, r0
 8001bde:	b940      	cbnz	r0, 8001bf2 <xQueueGenericReset+0x1a>
 8001be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be4:	f383 8811 	msr	BASEPRI, r3
 8001be8:	f3bf 8f6f 	isb	sy
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	e7fe      	b.n	8001bf0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001bf2:	f7ff fd7f 	bl	80016f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001bf6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bfa:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bfc:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001bfe:	4343      	muls	r3, r0
 8001c00:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001c02:	1a1b      	subs	r3, r3, r0
 8001c04:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c06:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001c08:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c0a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001c0c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c0e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001c10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001c18:	b995      	cbnz	r5, 8001c40 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c1a:	6923      	ldr	r3, [r4, #16]
 8001c1c:	b163      	cbz	r3, 8001c38 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c1e:	f104 0010 	add.w	r0, r4, #16
 8001c22:	f000 fcf9 	bl	8002618 <xTaskRemoveFromEventList>
 8001c26:	b138      	cbz	r0, 8001c38 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <xQueueGenericReset+0x7c>)
 8001c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	f3bf 8f4f 	dsb	sy
 8001c34:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001c38:	f7ff fd7e 	bl	8001738 <vPortExitCritical>
}
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c40:	f104 0010 	add.w	r0, r4, #16
 8001c44:	f7ff fcb8 	bl	80015b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c4c:	f7ff fcb4 	bl	80015b8 <vListInitialise>
 8001c50:	e7f2      	b.n	8001c38 <xQueueGenericReset+0x60>
 8001c52:	bf00      	nop
 8001c54:	e000ed04 	.word	0xe000ed04

08001c58 <xQueueGenericCreate>:
	{
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c5c:	4606      	mov	r6, r0
 8001c5e:	b940      	cbnz	r0, 8001c72 <xQueueGenericCreate+0x1a>
 8001c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c64:	f383 8811 	msr	BASEPRI, r3
 8001c68:	f3bf 8f6f 	isb	sy
 8001c6c:	f3bf 8f4f 	dsb	sy
 8001c70:	e7fe      	b.n	8001c70 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c72:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001c74:	3048      	adds	r0, #72	; 0x48
 8001c76:	f7ff fe69 	bl	800194c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	b138      	cbz	r0, 8001c8e <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001c7e:	b945      	cbnz	r5, 8001c92 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c80:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001c82:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001c84:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c86:	2101      	movs	r1, #1
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f7ff ffa5 	bl	8001bd8 <xQueueGenericReset>
	}
 8001c8e:	4620      	mov	r0, r4
 8001c90:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001c92:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c96:	6003      	str	r3, [r0, #0]
 8001c98:	e7f3      	b.n	8001c82 <xQueueGenericCreate+0x2a>
	...

08001c9c <xQueueGenericSend>:
{
 8001c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ca0:	4689      	mov	r9, r1
 8001ca2:	9201      	str	r2, [sp, #4]
 8001ca4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	b940      	cbnz	r0, 8001cbc <xQueueGenericSend+0x20>
 8001caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cae:	f383 8811 	msr	BASEPRI, r3
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	f3bf 8f4f 	dsb	sy
 8001cba:	e7fe      	b.n	8001cba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001cbc:	2900      	cmp	r1, #0
 8001cbe:	f040 8088 	bne.w	8001dd2 <xQueueGenericSend+0x136>
 8001cc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 8084 	beq.w	8001dd2 <xQueueGenericSend+0x136>
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	f383 8811 	msr	BASEPRI, r3
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	e7fe      	b.n	8001cda <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cdc:	9e01      	ldr	r6, [sp, #4]
 8001cde:	2e00      	cmp	r6, #0
 8001ce0:	f000 8082 	beq.w	8001de8 <xQueueGenericSend+0x14c>
 8001ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce8:	f383 8811 	msr	BASEPRI, r3
 8001cec:	f3bf 8f6f 	isb	sy
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	e7fe      	b.n	8001cf4 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001cf6:	9d01      	ldr	r5, [sp, #4]
 8001cf8:	b91d      	cbnz	r5, 8001d02 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8001cfa:	f7ff fd1d 	bl	8001738 <vPortExitCritical>
			return errQUEUE_FULL;
 8001cfe:	2000      	movs	r0, #0
 8001d00:	e058      	b.n	8001db4 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8001d02:	b916      	cbnz	r6, 8001d0a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8001d04:	a802      	add	r0, sp, #8
 8001d06:	f000 fcc9 	bl	800269c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001d0a:	f7ff fd15 	bl	8001738 <vPortExitCritical>
		vTaskSuspendAll();
 8001d0e:	f000 fabf 	bl	8002290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d12:	f7ff fcef 	bl	80016f4 <vPortEnterCritical>
 8001d16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001d1a:	2bff      	cmp	r3, #255	; 0xff
 8001d1c:	bf08      	it	eq
 8001d1e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001d22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001d26:	2bff      	cmp	r3, #255	; 0xff
 8001d28:	bf08      	it	eq
 8001d2a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001d2e:	f7ff fd03 	bl	8001738 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d32:	a901      	add	r1, sp, #4
 8001d34:	a802      	add	r0, sp, #8
 8001d36:	f000 fcc1 	bl	80026bc <xTaskCheckForTimeOut>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d143      	bne.n	8001dc6 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d3e:	f7ff fcd9 	bl	80016f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001d42:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001d44:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001d46:	f7ff fcf7 	bl	8001738 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d4a:	42ae      	cmp	r6, r5
 8001d4c:	d135      	bne.n	8001dba <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d4e:	9901      	ldr	r1, [sp, #4]
 8001d50:	f104 0010 	add.w	r0, r4, #16
 8001d54:	f000 fc46 	bl	80025e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f7ff ff05 	bl	8001b68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001d5e:	f000 fb31 	bl	80023c4 <xTaskResumeAll>
 8001d62:	b938      	cbnz	r0, 8001d74 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8001d64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d68:	f8ca 3000 	str.w	r3, [sl]
 8001d6c:	f3bf 8f4f 	dsb	sy
 8001d70:	f3bf 8f6f 	isb	sy
 8001d74:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001d76:	f7ff fcbd 	bl	80016f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d301      	bcc.n	8001d86 <xQueueGenericSend+0xea>
 8001d82:	2f02      	cmp	r7, #2
 8001d84:	d1b7      	bne.n	8001cf6 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d86:	463a      	mov	r2, r7
 8001d88:	4649      	mov	r1, r9
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff fea4 	bl	8001ad8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d92:	b11b      	cbz	r3, 8001d9c <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d98:	f000 fc3e 	bl	8002618 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001d9c:	b138      	cbz	r0, 8001dae <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <xQueueGenericSend+0x168>)
 8001da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001dae:	f7ff fcc3 	bl	8001738 <vPortExitCritical>
				return pdPASS;
 8001db2:	2001      	movs	r0, #1
}
 8001db4:	b004      	add	sp, #16
 8001db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f7ff fed4 	bl	8001b68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001dc0:	f000 fb00 	bl	80023c4 <xTaskResumeAll>
 8001dc4:	e7d6      	b.n	8001d74 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7ff fece 	bl	8001b68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001dcc:	f000 fafa 	bl	80023c4 <xTaskResumeAll>
 8001dd0:	e795      	b.n	8001cfe <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001dd2:	2f02      	cmp	r7, #2
 8001dd4:	d102      	bne.n	8001ddc <xQueueGenericSend+0x140>
 8001dd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10a      	bne.n	8001df2 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ddc:	f000 fcae 	bl	800273c <xTaskGetSchedulerState>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	f43f af7b 	beq.w	8001cdc <xQueueGenericSend+0x40>
 8001de6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001de8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001dec:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001e04 <xQueueGenericSend+0x168>
 8001df0:	e7c1      	b.n	8001d76 <xQueueGenericSend+0xda>
 8001df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df6:	f383 8811 	msr	BASEPRI, r3
 8001dfa:	f3bf 8f6f 	isb	sy
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	e7fe      	b.n	8001e02 <xQueueGenericSend+0x166>
 8001e04:	e000ed04 	.word	0xe000ed04

08001e08 <xQueueCreateMutex>:
	{
 8001e08:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f7ff ff22 	bl	8001c58 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8001e14:	4604      	mov	r4, r0
 8001e16:	b138      	cbz	r0, 8001e28 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001e1c:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8001e1e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001e20:	461a      	mov	r2, r3
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7ff ff3a 	bl	8001c9c <xQueueGenericSend>
	}
 8001e28:	4620      	mov	r0, r4
 8001e2a:	bd10      	pop	{r4, pc}

08001e2c <xQueueGenericReceive>:
{
 8001e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e30:	4688      	mov	r8, r1
 8001e32:	9201      	str	r2, [sp, #4]
 8001e34:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8001e36:	4604      	mov	r4, r0
 8001e38:	b940      	cbnz	r0, 8001e4c <xQueueGenericReceive+0x20>
 8001e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3e:	f383 8811 	msr	BASEPRI, r3
 8001e42:	f3bf 8f6f 	isb	sy
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	e7fe      	b.n	8001e4a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e4c:	2900      	cmp	r1, #0
 8001e4e:	f040 80a5 	bne.w	8001f9c <xQueueGenericReceive+0x170>
 8001e52:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a1 	beq.w	8001f9c <xQueueGenericReceive+0x170>
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	e7fe      	b.n	8001e6a <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e6c:	9e01      	ldr	r6, [sp, #4]
 8001e6e:	2e00      	cmp	r6, #0
 8001e70:	f000 809a 	beq.w	8001fa8 <xQueueGenericReceive+0x17c>
 8001e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e78:	f383 8811 	msr	BASEPRI, r3
 8001e7c:	f3bf 8f6f 	isb	sy
 8001e80:	f3bf 8f4f 	dsb	sy
 8001e84:	e7fe      	b.n	8001e84 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001e88:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d06d      	beq.n	8001f6a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e92:	e05f      	b.n	8001f54 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e94:	9d01      	ldr	r5, [sp, #4]
 8001e96:	b91d      	cbnz	r5, 8001ea0 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8001e98:	f7ff fc4e 	bl	8001738 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	e067      	b.n	8001f70 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8001ea0:	b916      	cbnz	r6, 8001ea8 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8001ea2:	a802      	add	r0, sp, #8
 8001ea4:	f000 fbfa 	bl	800269c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001ea8:	f7ff fc46 	bl	8001738 <vPortExitCritical>
		vTaskSuspendAll();
 8001eac:	f000 f9f0 	bl	8002290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001eb0:	f7ff fc20 	bl	80016f4 <vPortEnterCritical>
 8001eb4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001eb8:	2bff      	cmp	r3, #255	; 0xff
 8001eba:	bf08      	it	eq
 8001ebc:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8001ec0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001ec4:	2bff      	cmp	r3, #255	; 0xff
 8001ec6:	bf08      	it	eq
 8001ec8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8001ecc:	f7ff fc34 	bl	8001738 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ed0:	a901      	add	r1, sp, #4
 8001ed2:	a802      	add	r0, sp, #8
 8001ed4:	f000 fbf2 	bl	80026bc <xTaskCheckForTimeOut>
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d152      	bne.n	8001f82 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8001edc:	f7ff fc0a 	bl	80016f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001ee0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001ee2:	f7ff fc29 	bl	8001738 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ee6:	2d00      	cmp	r5, #0
 8001ee8:	d145      	bne.n	8001f76 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	b933      	cbnz	r3, 8001efc <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8001eee:	f7ff fc01 	bl	80016f4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001ef2:	6860      	ldr	r0, [r4, #4]
 8001ef4:	f000 fc32 	bl	800275c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8001ef8:	f7ff fc1e 	bl	8001738 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001efc:	9901      	ldr	r1, [sp, #4]
 8001efe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f02:	f000 fb6f 	bl	80025e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001f06:	4620      	mov	r0, r4
 8001f08:	f7ff fe2e 	bl	8001b68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001f0c:	f000 fa5a 	bl	80023c4 <xTaskResumeAll>
 8001f10:	b938      	cbnz	r0, 8001f22 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8001f12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f16:	f8ca 3000 	str.w	r3, [sl]
 8001f1a:	f3bf 8f4f 	dsb	sy
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001f24:	f7ff fbe6 	bl	80016f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f28:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f2a:	2d00      	cmp	r5, #0
 8001f2c:	d0b2      	beq.n	8001e94 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f2e:	4641      	mov	r1, r8
 8001f30:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001f32:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f34:	f7ff fe03 	bl	8001b3e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8001f38:	f1b9 0f00 	cmp.w	r9, #0
 8001f3c:	d1a3      	bne.n	8001e86 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f3e:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001f40:	3d01      	subs	r5, #1
 8001f42:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f44:	b913      	cbnz	r3, 8001f4c <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001f46:	f000 fc9f 	bl	8002888 <pvTaskIncrementMutexHeldCount>
 8001f4a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f4c:	6923      	ldr	r3, [r4, #16]
 8001f4e:	b163      	cbz	r3, 8001f6a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f50:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f54:	f000 fb60 	bl	8002618 <xTaskRemoveFromEventList>
 8001f58:	b138      	cbz	r0, 8001f6a <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <xQueueGenericReceive+0x184>)
 8001f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	f3bf 8f4f 	dsb	sy
 8001f66:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001f6a:	f7ff fbe5 	bl	8001738 <vPortExitCritical>
				return pdPASS;
 8001f6e:	2001      	movs	r0, #1
}
 8001f70:	b004      	add	sp, #16
 8001f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7ff fdf6 	bl	8001b68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f7c:	f000 fa22 	bl	80023c4 <xTaskResumeAll>
 8001f80:	e7cf      	b.n	8001f22 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff fdf0 	bl	8001b68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f88:	f000 fa1c 	bl	80023c4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001f8c:	f7ff fbb2 	bl	80016f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001f90:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001f92:	f7ff fbd1 	bl	8001738 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f96:	2d00      	cmp	r5, #0
 8001f98:	d1c3      	bne.n	8001f22 <xQueueGenericReceive+0xf6>
 8001f9a:	e77f      	b.n	8001e9c <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f9c:	f000 fbce 	bl	800273c <xTaskGetSchedulerState>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	f43f af63 	beq.w	8001e6c <xQueueGenericReceive+0x40>
 8001fa6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001fa8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8001faa:	f8df a004 	ldr.w	sl, [pc, #4]	; 8001fb0 <xQueueGenericReceive+0x184>
 8001fae:	e7b9      	b.n	8001f24 <xQueueGenericReceive+0xf8>
 8001fb0:	e000ed04 	.word	0xe000ed04

08001fb4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <prvResetNextTaskUnblockTime+0x1c>)
 8001fb6:	6813      	ldr	r3, [r2, #0]
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <prvResetNextTaskUnblockTime+0x20>)
 8001fbc:	b919      	cbnz	r1, 8001fc6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001fbe:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001fca:	68d2      	ldr	r2, [r2, #12]
 8001fcc:	6852      	ldr	r2, [r2, #4]
 8001fce:	e7f8      	b.n	8001fc2 <prvResetNextTaskUnblockTime+0xe>
 8001fd0:	20003e1c 	.word	0x20003e1c
 8001fd4:	20003ef4 	.word	0x20003ef4

08001fd8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fdc:	4e1b      	ldr	r6, [pc, #108]	; (800204c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001fde:	681d      	ldr	r5, [r3, #0]
{
 8001fe0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fe2:	6830      	ldr	r0, [r6, #0]
 8001fe4:	3004      	adds	r0, #4
{
 8001fe6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fe8:	f7ff fb17 	bl	800161a <uxListRemove>
 8001fec:	4633      	mov	r3, r6
 8001fee:	b940      	cbnz	r0, 8002002 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001ff0:	6831      	ldr	r1, [r6, #0]
 8001ff2:	4e17      	ldr	r6, [pc, #92]	; (8002050 <prvAddCurrentTaskToDelayedList+0x78>)
 8001ff4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001ff6:	6832      	ldr	r2, [r6, #0]
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	4088      	lsls	r0, r1
 8001ffc:	ea22 0200 	bic.w	r2, r2, r0
 8002000:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002002:	1c62      	adds	r2, r4, #1
 8002004:	d107      	bne.n	8002016 <prvAddCurrentTaskToDelayedList+0x3e>
 8002006:	b137      	cbz	r7, 8002016 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002008:	6819      	ldr	r1, [r3, #0]
 800200a:	4812      	ldr	r0, [pc, #72]	; (8002054 <prvAddCurrentTaskToDelayedList+0x7c>)
 800200c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800200e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002012:	f7ff badf 	b.w	80015d4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002016:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002018:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800201a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800201c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800201e:	d907      	bls.n	8002030 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <prvAddCurrentTaskToDelayedList+0x80>)
 8002022:	6810      	ldr	r0, [r2, #0]
 8002024:	6819      	ldr	r1, [r3, #0]
}
 8002026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800202a:	3104      	adds	r1, #4
 800202c:	f7ff bade 	b.w	80015ec <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002030:	4a0a      	ldr	r2, [pc, #40]	; (800205c <prvAddCurrentTaskToDelayedList+0x84>)
 8002032:	6810      	ldr	r0, [r2, #0]
 8002034:	6819      	ldr	r1, [r3, #0]
 8002036:	3104      	adds	r1, #4
 8002038:	f7ff fad8 	bl	80015ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <prvAddCurrentTaskToDelayedList+0x88>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002042:	bf38      	it	cc
 8002044:	601c      	strcc	r4, [r3, #0]
 8002046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002048:	20003f3c 	.word	0x20003f3c
 800204c:	20003e18 	.word	0x20003e18
 8002050:	20003ec4 	.word	0x20003ec4
 8002054:	20003f14 	.word	0x20003f14
 8002058:	20003e20 	.word	0x20003e20
 800205c:	20003e1c 	.word	0x20003e1c
 8002060:	20003ef4 	.word	0x20003ef4

08002064 <prvTaskIsTaskSuspended.part.0>:
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	e7fe      	b.n	8002074 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08002078 <xTaskCreate>:
	{
 8002078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800207c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002080:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002082:	4650      	mov	r0, sl
	{
 8002084:	460f      	mov	r7, r1
 8002086:	4699      	mov	r9, r3
 8002088:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800208a:	f7ff fc5f 	bl	800194c <pvPortMalloc>
			if( pxStack != NULL )
 800208e:	4605      	mov	r5, r0
 8002090:	2800      	cmp	r0, #0
 8002092:	f000 8096 	beq.w	80021c2 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002096:	2054      	movs	r0, #84	; 0x54
 8002098:	f7ff fc58 	bl	800194c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800209c:	4604      	mov	r4, r0
 800209e:	2800      	cmp	r0, #0
 80020a0:	f000 808c 	beq.w	80021bc <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80020a4:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80020a8:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80020aa:	4455      	add	r5, sl
 80020ac:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80020ae:	f025 0a07 	bic.w	sl, r5, #7
 80020b2:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80020b6:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80020b8:	7859      	ldrb	r1, [r3, #1]
 80020ba:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80020be:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80020c2:	b109      	cbz	r1, 80020c8 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020c4:	42bb      	cmp	r3, r7
 80020c6:	d1f7      	bne.n	80020b8 <xTaskCreate+0x40>
 80020c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80020ca:	2d06      	cmp	r5, #6
 80020cc:	bf28      	it	cs
 80020ce:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80020d0:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80020d4:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80020d6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80020d8:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80020da:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80020dc:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80020e0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80020e4:	f7ff fa73 	bl	80015ce <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020e8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80020ec:	f104 0018 	add.w	r0, r4, #24
 80020f0:	f7ff fa6d 	bl	80015ce <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80020f4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020f8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020fa:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020fc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80020fe:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002102:	464a      	mov	r2, r9
 8002104:	4641      	mov	r1, r8
 8002106:	4650      	mov	r0, sl
 8002108:	f7ff faca 	bl	80016a0 <pxPortInitialiseStack>
 800210c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800210e:	b106      	cbz	r6, 8002112 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002110:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002112:	f7ff faef 	bl	80016f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002118:	4e32      	ldr	r6, [pc, #200]	; (80021e4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002210 <xTaskCreate+0x198>
 8002120:	3201      	adds	r2, #1
 8002122:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002124:	6835      	ldr	r5, [r6, #0]
 8002126:	2d00      	cmp	r5, #0
 8002128:	d14e      	bne.n	80021c8 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800212a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d11d      	bne.n	800216e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002132:	eb08 0005 	add.w	r0, r8, r5
 8002136:	3514      	adds	r5, #20
 8002138:	f7ff fa3e 	bl	80015b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800213c:	2d8c      	cmp	r5, #140	; 0x8c
 800213e:	d1f8      	bne.n	8002132 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002140:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002214 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002144:	4d28      	ldr	r5, [pc, #160]	; (80021e8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002146:	4648      	mov	r0, r9
 8002148:	f7ff fa36 	bl	80015b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800214c:	4628      	mov	r0, r5
 800214e:	f7ff fa33 	bl	80015b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002152:	4826      	ldr	r0, [pc, #152]	; (80021ec <xTaskCreate+0x174>)
 8002154:	f7ff fa30 	bl	80015b8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002158:	4825      	ldr	r0, [pc, #148]	; (80021f0 <xTaskCreate+0x178>)
 800215a:	f7ff fa2d 	bl	80015b8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800215e:	4825      	ldr	r0, [pc, #148]	; (80021f4 <xTaskCreate+0x17c>)
 8002160:	f7ff fa2a 	bl	80015b8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <xTaskCreate+0x180>)
 8002166:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <xTaskCreate+0x184>)
 800216c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800216e:	4a24      	ldr	r2, [pc, #144]	; (8002200 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002170:	4924      	ldr	r1, [pc, #144]	; (8002204 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002172:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002174:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002176:	3301      	adds	r3, #1
 8002178:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800217a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800217c:	2501      	movs	r5, #1
 800217e:	fa05 f302 	lsl.w	r3, r5, r2
 8002182:	4303      	orrs	r3, r0
 8002184:	2014      	movs	r0, #20
 8002186:	600b      	str	r3, [r1, #0]
 8002188:	fb00 8002 	mla	r0, r0, r2, r8
 800218c:	4639      	mov	r1, r7
 800218e:	f7ff fa21 	bl	80015d4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002192:	f7ff fad1 	bl	8001738 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <xTaskCreate+0x190>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b163      	cbz	r3, 80021b6 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800219c:	6833      	ldr	r3, [r6, #0]
 800219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d207      	bcs.n	80021b6 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <xTaskCreate+0x194>)
 80021a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	f3bf 8f6f 	isb	sy
	}
 80021b6:	4628      	mov	r0, r5
 80021b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80021bc:	4628      	mov	r0, r5
 80021be:	f7ff fc53 	bl	8001a68 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021c2:	f04f 35ff 	mov.w	r5, #4294967295
 80021c6:	e7f6      	b.n	80021b6 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <xTaskCreate+0x190>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ce      	bne.n	800216e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80021d0:	6833      	ldr	r3, [r6, #0]
 80021d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021d6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80021d8:	bf98      	it	ls
 80021da:	6034      	strls	r4, [r6, #0]
 80021dc:	e7c7      	b.n	800216e <xTaskCreate+0xf6>
 80021de:	bf00      	nop
 80021e0:	20003eb0 	.word	0x20003eb0
 80021e4:	20003e18 	.word	0x20003e18
 80021e8:	20003edc 	.word	0x20003edc
 80021ec:	20003efc 	.word	0x20003efc
 80021f0:	20003f28 	.word	0x20003f28
 80021f4:	20003f14 	.word	0x20003f14
 80021f8:	20003e1c 	.word	0x20003e1c
 80021fc:	20003e20 	.word	0x20003e20
 8002200:	20003ec0 	.word	0x20003ec0
 8002204:	20003ec4 	.word	0x20003ec4
 8002208:	20003f10 	.word	0x20003f10
 800220c:	e000ed04 	.word	0xe000ed04
 8002210:	20003e24 	.word	0x20003e24
 8002214:	20003ec8 	.word	0x20003ec8

08002218 <vTaskStartScheduler>:
{
 8002218:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <vTaskStartScheduler+0x60>)
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	2400      	movs	r4, #0
 8002220:	9400      	str	r4, [sp, #0]
 8002222:	4623      	mov	r3, r4
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	4915      	ldr	r1, [pc, #84]	; (800227c <vTaskStartScheduler+0x64>)
 8002228:	4815      	ldr	r0, [pc, #84]	; (8002280 <vTaskStartScheduler+0x68>)
 800222a:	f7ff ff25 	bl	8002078 <xTaskCreate>
	if( xReturn == pdPASS )
 800222e:	2801      	cmp	r0, #1
 8002230:	d114      	bne.n	800225c <vTaskStartScheduler+0x44>
 8002232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <vTaskStartScheduler+0x6c>)
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <vTaskStartScheduler+0x70>)
 800224c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <vTaskStartScheduler+0x74>)
 8002250:	601c      	str	r4, [r3, #0]
}
 8002252:	b002      	add	sp, #8
 8002254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002258:	f7ff bade 	b.w	8001818 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800225c:	3001      	adds	r0, #1
 800225e:	d108      	bne.n	8002272 <vTaskStartScheduler+0x5a>
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	e7fe      	b.n	8002270 <vTaskStartScheduler+0x58>
}
 8002272:	b002      	add	sp, #8
 8002274:	bd10      	pop	{r4, pc}
 8002276:	bf00      	nop
 8002278:	20003ef0 	.word	0x20003ef0
 800227c:	080031d0 	.word	0x080031d0
 8002280:	080024fd 	.word	0x080024fd
 8002284:	20003ef4 	.word	0x20003ef4
 8002288:	20003f10 	.word	0x20003f10
 800228c:	20003f3c 	.word	0x20003f3c

08002290 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002290:	4a02      	ldr	r2, [pc, #8]	; (800229c <vTaskSuspendAll+0xc>)
 8002292:	6813      	ldr	r3, [r2, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20003ebc 	.word	0x20003ebc

080022a0 <xTaskIncrementTick>:
{
 80022a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022a4:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <xTaskIncrementTick+0xf8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d153      	bne.n	8002354 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80022ac:	4b3b      	ldr	r3, [pc, #236]	; (800239c <xTaskIncrementTick+0xfc>)
 80022ae:	681c      	ldr	r4, [r3, #0]
 80022b0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80022b2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80022b4:	b9bc      	cbnz	r4, 80022e6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80022b6:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <xTaskIncrementTick+0x100>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	b142      	cbz	r2, 80022d0 <xTaskIncrementTick+0x30>
 80022be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	e7fe      	b.n	80022ce <xTaskIncrementTick+0x2e>
 80022d0:	4a34      	ldr	r2, [pc, #208]	; (80023a4 <xTaskIncrementTick+0x104>)
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	6810      	ldr	r0, [r2, #0]
 80022d6:	6018      	str	r0, [r3, #0]
 80022d8:	6011      	str	r1, [r2, #0]
 80022da:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <xTaskIncrementTick+0x108>)
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	f7ff fe67 	bl	8001fb4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80022e6:	4d31      	ldr	r5, [pc, #196]	; (80023ac <xTaskIncrementTick+0x10c>)
 80022e8:	4f31      	ldr	r7, [pc, #196]	; (80023b0 <xTaskIncrementTick+0x110>)
 80022ea:	682b      	ldr	r3, [r5, #0]
 80022ec:	429c      	cmp	r4, r3
 80022ee:	f04f 0b00 	mov.w	fp, #0
 80022f2:	d33e      	bcc.n	8002372 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022f4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80023a0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80022f8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80023c0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022fc:	f8d8 2000 	ldr.w	r2, [r8]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	bb72      	cbnz	r2, 8002362 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002304:	f04f 32ff 	mov.w	r2, #4294967295
 8002308:	602a      	str	r2, [r5, #0]
					break;
 800230a:	e032      	b.n	8002372 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800230c:	f106 0a04 	add.w	sl, r6, #4
 8002310:	4650      	mov	r0, sl
 8002312:	f7ff f982 	bl	800161a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002316:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002318:	b119      	cbz	r1, 8002322 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800231a:	f106 0018 	add.w	r0, r6, #24
 800231e:	f7ff f97c 	bl	800161a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002322:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002324:	f8d9 3000 	ldr.w	r3, [r9]
 8002328:	2201      	movs	r2, #1
 800232a:	fa02 f100 	lsl.w	r1, r2, r0
 800232e:	4319      	orrs	r1, r3
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <xTaskIncrementTick+0x114>)
 8002332:	f8c9 1000 	str.w	r1, [r9]
 8002336:	f04f 0e14 	mov.w	lr, #20
 800233a:	4651      	mov	r1, sl
 800233c:	fb0e 3000 	mla	r0, lr, r0, r3
 8002340:	f7ff f948 	bl	80015d4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002344:	6838      	ldr	r0, [r7, #0]
 8002346:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002348:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800234a:	4291      	cmp	r1, r2
 800234c:	bf28      	it	cs
 800234e:	f04f 0b01 	movcs.w	fp, #1
 8002352:	e7d3      	b.n	80022fc <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <xTaskIncrementTick+0x118>)
 8002356:	6813      	ldr	r3, [r2, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800235c:	f04f 0b00 	mov.w	fp, #0
 8002360:	e011      	b.n	8002386 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002362:	f8d8 2000 	ldr.w	r2, [r8]
 8002366:	68d2      	ldr	r2, [r2, #12]
 8002368:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800236a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800236c:	428c      	cmp	r4, r1
 800236e:	d2cd      	bcs.n	800230c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002370:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <xTaskIncrementTick+0x114>)
 8002376:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002378:	2214      	movs	r2, #20
 800237a:	434a      	muls	r2, r1
 800237c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800237e:	2a02      	cmp	r2, #2
 8002380:	bf28      	it	cs
 8002382:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002386:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <xTaskIncrementTick+0x11c>)
 8002388:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800238a:	2a00      	cmp	r2, #0
 800238c:	bf18      	it	ne
 800238e:	f04f 0b01 	movne.w	fp, #1
}
 8002392:	4658      	mov	r0, fp
 8002394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002398:	20003ebc 	.word	0x20003ebc
 800239c:	20003f3c 	.word	0x20003f3c
 80023a0:	20003e1c 	.word	0x20003e1c
 80023a4:	20003e20 	.word	0x20003e20
 80023a8:	20003ef8 	.word	0x20003ef8
 80023ac:	20003ef4 	.word	0x20003ef4
 80023b0:	20003e18 	.word	0x20003e18
 80023b4:	20003e24 	.word	0x20003e24
 80023b8:	20003eb8 	.word	0x20003eb8
 80023bc:	20003f40 	.word	0x20003f40
 80023c0:	20003ec4 	.word	0x20003ec4

080023c4 <xTaskResumeAll>:
{
 80023c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80023c8:	4c31      	ldr	r4, [pc, #196]	; (8002490 <xTaskResumeAll+0xcc>)
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	b943      	cbnz	r3, 80023e0 <xTaskResumeAll+0x1c>
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	e7fe      	b.n	80023de <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80023e0:	f7ff f988 	bl	80016f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023ea:	6824      	ldr	r4, [r4, #0]
 80023ec:	b12c      	cbz	r4, 80023fa <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80023ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80023f0:	f7ff f9a2 	bl	8001738 <vPortExitCritical>
}
 80023f4:	4620      	mov	r0, r4
 80023f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <xTaskResumeAll+0xd0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f5      	beq.n	80023ee <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002402:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80024ac <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002406:	4f24      	ldr	r7, [pc, #144]	; (8002498 <xTaskResumeAll+0xd4>)
 8002408:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80024b0 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800240c:	f8d9 3000 	ldr.w	r3, [r9]
 8002410:	b9e3      	cbnz	r3, 800244c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002412:	b10c      	cbz	r4, 8002418 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002414:	f7ff fdce 	bl	8001fb4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002418:	4d20      	ldr	r5, [pc, #128]	; (800249c <xTaskResumeAll+0xd8>)
 800241a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800241c:	b144      	cbz	r4, 8002430 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800241e:	4e20      	ldr	r6, [pc, #128]	; (80024a0 <xTaskResumeAll+0xdc>)
 8002420:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002422:	f7ff ff3d 	bl	80022a0 <xTaskIncrementTick>
 8002426:	b100      	cbz	r0, 800242a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002428:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800242a:	3c01      	subs	r4, #1
 800242c:	d1f9      	bne.n	8002422 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800242e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <xTaskResumeAll+0xdc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0da      	beq.n	80023ee <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <xTaskResumeAll+0xe0>)
 800243a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002448:	2401      	movs	r4, #1
 800244a:	e7d1      	b.n	80023f0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800244c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002450:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002452:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002454:	f104 0018 	add.w	r0, r4, #24
 8002458:	f7ff f8df 	bl	800161a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800245c:	4630      	mov	r0, r6
 800245e:	f7ff f8dc 	bl	800161a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002462:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002464:	6839      	ldr	r1, [r7, #0]
 8002466:	2501      	movs	r5, #1
 8002468:	fa05 f302 	lsl.w	r3, r5, r2
 800246c:	2014      	movs	r0, #20
 800246e:	430b      	orrs	r3, r1
 8002470:	fb00 8002 	mla	r0, r0, r2, r8
 8002474:	4631      	mov	r1, r6
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	f7ff f8ac 	bl	80015d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <xTaskResumeAll+0xe4>)
 800247e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002486:	bf24      	itt	cs
 8002488:	4b05      	ldrcs	r3, [pc, #20]	; (80024a0 <xTaskResumeAll+0xdc>)
 800248a:	601d      	strcs	r5, [r3, #0]
 800248c:	e7be      	b.n	800240c <xTaskResumeAll+0x48>
 800248e:	bf00      	nop
 8002490:	20003ebc 	.word	0x20003ebc
 8002494:	20003eb0 	.word	0x20003eb0
 8002498:	20003ec4 	.word	0x20003ec4
 800249c:	20003eb8 	.word	0x20003eb8
 80024a0:	20003f40 	.word	0x20003f40
 80024a4:	e000ed04 	.word	0xe000ed04
 80024a8:	20003e18 	.word	0x20003e18
 80024ac:	20003efc 	.word	0x20003efc
 80024b0:	20003e24 	.word	0x20003e24

080024b4 <vTaskDelay>:
	{
 80024b4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024b6:	b940      	cbnz	r0, 80024ca <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <vTaskDelay+0x40>)
 80024ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <vTaskDelay+0x44>)
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	b141      	cbz	r1, 80024e2 <vTaskDelay+0x2e>
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	e7fe      	b.n	80024e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80024e2:	f7ff fed5 	bl	8002290 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80024e6:	f7ff fd77 	bl	8001fd8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80024ea:	f7ff ff6b 	bl	80023c4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d0e2      	beq.n	80024b8 <vTaskDelay+0x4>
 80024f2:	bd08      	pop	{r3, pc}
 80024f4:	e000ed04 	.word	0xe000ed04
 80024f8:	20003ebc 	.word	0x20003ebc

080024fc <prvIdleTask>:
{
 80024fc:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80024fe:	4e17      	ldr	r6, [pc, #92]	; (800255c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002500:	4c17      	ldr	r4, [pc, #92]	; (8002560 <prvIdleTask+0x64>)
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	b963      	cbnz	r3, 8002520 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <prvIdleTask+0x68>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d9f8      	bls.n	8002500 <prvIdleTask+0x4>
				taskYIELD();
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <prvIdleTask+0x6c>)
 8002510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	f3bf 8f4f 	dsb	sy
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	e7ef      	b.n	8002500 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002520:	f7ff feb6 	bl	8002290 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002524:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002526:	f7ff ff4d 	bl	80023c4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800252a:	2d00      	cmp	r5, #0
 800252c:	d0e9      	beq.n	8002502 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800252e:	f7ff f8e1 	bl	80016f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002532:	68f3      	ldr	r3, [r6, #12]
 8002534:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002536:	1d28      	adds	r0, r5, #4
 8002538:	f7ff f86f 	bl	800161a <uxListRemove>
					--uxCurrentNumberOfTasks;
 800253c:	4a0b      	ldr	r2, [pc, #44]	; (800256c <prvIdleTask+0x70>)
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	3b01      	subs	r3, #1
 8002542:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	3b01      	subs	r3, #1
 8002548:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800254a:	f7ff f8f5 	bl	8001738 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800254e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002550:	f7ff fa8a 	bl	8001a68 <vPortFree>
			vPortFree( pxTCB );
 8002554:	4628      	mov	r0, r5
 8002556:	f7ff fa87 	bl	8001a68 <vPortFree>
 800255a:	e7d2      	b.n	8002502 <prvIdleTask+0x6>
 800255c:	20003f28 	.word	0x20003f28
 8002560:	20003eb4 	.word	0x20003eb4
 8002564:	20003e24 	.word	0x20003e24
 8002568:	e000ed04 	.word	0xe000ed04
 800256c:	20003eb0 	.word	0x20003eb0

08002570 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <vTaskSwitchContext+0x60>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <vTaskSwitchContext+0x64>)
{
 8002576:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002578:	b112      	cbz	r2, 8002580 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800257a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002580:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <vTaskSwitchContext+0x68>)
 8002584:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f1c3 031f 	rsb	r3, r3, #31
 8002590:	2214      	movs	r2, #20
 8002592:	4912      	ldr	r1, [pc, #72]	; (80025dc <vTaskSwitchContext+0x6c>)
 8002594:	435a      	muls	r2, r3
 8002596:	1888      	adds	r0, r1, r2
 8002598:	588c      	ldr	r4, [r1, r2]
 800259a:	b944      	cbnz	r4, 80025ae <vTaskSwitchContext+0x3e>
	__asm volatile
 800259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	e7fe      	b.n	80025ac <vTaskSwitchContext+0x3c>
 80025ae:	6844      	ldr	r4, [r0, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	6864      	ldr	r4, [r4, #4]
 80025b4:	6044      	str	r4, [r0, #4]
 80025b6:	440a      	add	r2, r1
 80025b8:	4294      	cmp	r4, r2
 80025ba:	bf04      	itt	eq
 80025bc:	6862      	ldreq	r2, [r4, #4]
 80025be:	6042      	streq	r2, [r0, #4]
 80025c0:	2214      	movs	r2, #20
 80025c2:	fb02 1303 	mla	r3, r2, r3, r1
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <vTaskSwitchContext+0x70>)
 80025cc:	e7d6      	b.n	800257c <vTaskSwitchContext+0xc>
 80025ce:	bf00      	nop
 80025d0:	20003ebc 	.word	0x20003ebc
 80025d4:	20003f40 	.word	0x20003f40
 80025d8:	20003ec4 	.word	0x20003ec4
 80025dc:	20003e24 	.word	0x20003e24
 80025e0:	20003e18 	.word	0x20003e18

080025e4 <vTaskPlaceOnEventList>:
{
 80025e4:	b510      	push	{r4, lr}
 80025e6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80025e8:	b940      	cbnz	r0, 80025fc <vTaskPlaceOnEventList+0x18>
 80025ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ee:	f383 8811 	msr	BASEPRI, r3
 80025f2:	f3bf 8f6f 	isb	sy
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	e7fe      	b.n	80025fa <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <vTaskPlaceOnEventList+0x30>)
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	3118      	adds	r1, #24
 8002602:	f7fe fff3 	bl	80015ec <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002606:	4620      	mov	r0, r4
 8002608:	2101      	movs	r1, #1
}
 800260a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800260e:	f7ff bce3 	b.w	8001fd8 <prvAddCurrentTaskToDelayedList>
 8002612:	bf00      	nop
 8002614:	20003e18 	.word	0x20003e18

08002618 <xTaskRemoveFromEventList>:
{
 8002618:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800261a:	68c3      	ldr	r3, [r0, #12]
 800261c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800261e:	b944      	cbnz	r4, 8002632 <xTaskRemoveFromEventList+0x1a>
 8002620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	e7fe      	b.n	8002630 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002632:	f104 0518 	add.w	r5, r4, #24
 8002636:	4628      	mov	r0, r5
 8002638:	f7fe ffef 	bl	800161a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <xTaskRemoveFromEventList+0x6c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b9e3      	cbnz	r3, 800267c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002642:	1d25      	adds	r5, r4, #4
 8002644:	4628      	mov	r0, r5
 8002646:	f7fe ffe8 	bl	800161a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800264a:	490f      	ldr	r1, [pc, #60]	; (8002688 <xTaskRemoveFromEventList+0x70>)
 800264c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800264e:	6808      	ldr	r0, [r1, #0]
 8002650:	2301      	movs	r3, #1
 8002652:	4093      	lsls	r3, r2
 8002654:	4303      	orrs	r3, r0
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <xTaskRemoveFromEventList+0x74>)
 800265a:	2014      	movs	r0, #20
 800265c:	4629      	mov	r1, r5
 800265e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002662:	f7fe ffb7 	bl	80015d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <xTaskRemoveFromEventList+0x78>)
 8002668:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002670:	bf83      	ittte	hi
 8002672:	4b08      	ldrhi	r3, [pc, #32]	; (8002694 <xTaskRemoveFromEventList+0x7c>)
 8002674:	2001      	movhi	r0, #1
 8002676:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8002678:	2000      	movls	r0, #0
}
 800267a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800267c:	4629      	mov	r1, r5
 800267e:	4806      	ldr	r0, [pc, #24]	; (8002698 <xTaskRemoveFromEventList+0x80>)
 8002680:	e7ef      	b.n	8002662 <xTaskRemoveFromEventList+0x4a>
 8002682:	bf00      	nop
 8002684:	20003ebc 	.word	0x20003ebc
 8002688:	20003ec4 	.word	0x20003ec4
 800268c:	20003e24 	.word	0x20003e24
 8002690:	20003e18 	.word	0x20003e18
 8002694:	20003f40 	.word	0x20003f40
 8002698:	20003efc 	.word	0x20003efc

0800269c <vTaskSetTimeOutState>:
{
 800269c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800269e:	b908      	cbnz	r0, 80026a4 <vTaskSetTimeOutState+0x8>
 80026a0:	f7ff fce0 	bl	8002064 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <vTaskSetTimeOutState+0x18>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80026aa:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <vTaskSetTimeOutState+0x1c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6043      	str	r3, [r0, #4]
 80026b0:	bd08      	pop	{r3, pc}
 80026b2:	bf00      	nop
 80026b4:	20003ef8 	.word	0x20003ef8
 80026b8:	20003f3c 	.word	0x20003f3c

080026bc <xTaskCheckForTimeOut>:
{
 80026bc:	b538      	push	{r3, r4, r5, lr}
 80026be:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80026c0:	4604      	mov	r4, r0
 80026c2:	b940      	cbnz	r0, 80026d6 <xTaskCheckForTimeOut+0x1a>
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	e7fe      	b.n	80026d4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80026d6:	b941      	cbnz	r1, 80026ea <xTaskCheckForTimeOut+0x2e>
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	e7fe      	b.n	80026e8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80026ea:	f7ff f803 	bl	80016f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <xTaskCheckForTimeOut+0x6c>)
 80026f0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80026f2:	682b      	ldr	r3, [r5, #0]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	d010      	beq.n	800271a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80026f8:	4a0c      	ldr	r2, [pc, #48]	; (800272c <xTaskCheckForTimeOut+0x70>)
 80026fa:	6820      	ldr	r0, [r4, #0]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4290      	cmp	r0, r2
 8002700:	6862      	ldr	r2, [r4, #4]
 8002702:	d001      	beq.n	8002708 <xTaskCheckForTimeOut+0x4c>
 8002704:	4291      	cmp	r1, r2
 8002706:	d20d      	bcs.n	8002724 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002708:	1a88      	subs	r0, r1, r2
 800270a:	4283      	cmp	r3, r0
 800270c:	d90a      	bls.n	8002724 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800270e:	1a5b      	subs	r3, r3, r1
 8002710:	4413      	add	r3, r2
 8002712:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002714:	4620      	mov	r0, r4
 8002716:	f7ff ffc1 	bl	800269c <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800271a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800271c:	f7ff f80c 	bl	8001738 <vPortExitCritical>
}
 8002720:	4620      	mov	r0, r4
 8002722:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8002724:	2401      	movs	r4, #1
 8002726:	e7f9      	b.n	800271c <xTaskCheckForTimeOut+0x60>
 8002728:	20003f3c 	.word	0x20003f3c
 800272c:	20003ef8 	.word	0x20003ef8

08002730 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002730:	4b01      	ldr	r3, [pc, #4]	; (8002738 <vTaskMissedYield+0x8>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	4770      	bx	lr
 8002738:	20003f40 	.word	0x20003f40

0800273c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <xTaskGetSchedulerState+0x18>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b133      	cbz	r3, 8002750 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <xTaskGetSchedulerState+0x1c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002748:	bf0c      	ite	eq
 800274a:	2002      	moveq	r0, #2
 800274c:	2000      	movne	r0, #0
 800274e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002750:	2001      	movs	r0, #1
	}
 8002752:	4770      	bx	lr
 8002754:	20003f10 	.word	0x20003f10
 8002758:	20003ebc 	.word	0x20003ebc

0800275c <vTaskPriorityInherit>:
	{
 800275c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8002760:	4604      	mov	r4, r0
 8002762:	2800      	cmp	r0, #0
 8002764:	d038      	beq.n	80027d8 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002766:	4d1d      	ldr	r5, [pc, #116]	; (80027dc <vTaskPriorityInherit+0x80>)
 8002768:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800276a:	682a      	ldr	r2, [r5, #0]
 800276c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800276e:	4293      	cmp	r3, r2
 8002770:	d232      	bcs.n	80027d8 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002772:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002774:	4e1a      	ldr	r6, [pc, #104]	; (80027e0 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002776:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002778:	bfa1      	itttt	ge
 800277a:	682a      	ldrge	r2, [r5, #0]
 800277c:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800277e:	f1c2 0207 	rsbge	r2, r2, #7
 8002782:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002784:	2714      	movs	r7, #20
 8002786:	6942      	ldr	r2, [r0, #20]
 8002788:	fb07 6303 	mla	r3, r7, r3, r6
 800278c:	429a      	cmp	r2, r3
 800278e:	d120      	bne.n	80027d2 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002790:	f100 0804 	add.w	r8, r0, #4
 8002794:	4640      	mov	r0, r8
 8002796:	f7fe ff40 	bl	800161a <uxListRemove>
 800279a:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <vTaskPriorityInherit+0x88>)
 800279c:	b948      	cbnz	r0, 80027b2 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800279e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80027a0:	4347      	muls	r7, r0
 80027a2:	59f3      	ldr	r3, [r6, r7]
 80027a4:	b92b      	cbnz	r3, 80027b2 <vTaskPriorityInherit+0x56>
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	2101      	movs	r1, #1
 80027aa:	4081      	lsls	r1, r0
 80027ac:	ea23 0301 	bic.w	r3, r3, r1
 80027b0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80027b2:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80027b4:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80027b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80027b8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80027ba:	2301      	movs	r3, #1
 80027bc:	4083      	lsls	r3, r0
 80027be:	430b      	orrs	r3, r1
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	2314      	movs	r3, #20
 80027c4:	4641      	mov	r1, r8
 80027c6:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80027ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80027ce:	f7fe bf01 	b.w	80015d4 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80027d2:	682b      	ldr	r3, [r5, #0]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80027d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027dc:	20003e18 	.word	0x20003e18
 80027e0:	20003e24 	.word	0x20003e24
 80027e4:	20003ec4 	.word	0x20003ec4

080027e8 <xTaskPriorityDisinherit>:
	{
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80027ea:	4604      	mov	r4, r0
 80027ec:	b908      	cbnz	r0, 80027f2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80027ee:	2000      	movs	r0, #0
 80027f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <xTaskPriorityDisinherit+0x94>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4298      	cmp	r0, r3
 80027f8:	d008      	beq.n	800280c <xTaskPriorityDisinherit+0x24>
 80027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	e7fe      	b.n	800280a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800280c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800280e:	b943      	cbnz	r3, 8002822 <xTaskPriorityDisinherit+0x3a>
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	e7fe      	b.n	8002820 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002822:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002824:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8002826:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002828:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800282a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800282c:	d0df      	beq.n	80027ee <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1dd      	bne.n	80027ee <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002832:	1d05      	adds	r5, r0, #4
 8002834:	4628      	mov	r0, r5
 8002836:	f7fe fef0 	bl	800161a <uxListRemove>
 800283a:	4e11      	ldr	r6, [pc, #68]	; (8002880 <xTaskPriorityDisinherit+0x98>)
 800283c:	4a11      	ldr	r2, [pc, #68]	; (8002884 <xTaskPriorityDisinherit+0x9c>)
 800283e:	b950      	cbnz	r0, 8002856 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002840:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002842:	2114      	movs	r1, #20
 8002844:	4379      	muls	r1, r7
 8002846:	5873      	ldr	r3, [r6, r1]
 8002848:	b92b      	cbnz	r3, 8002856 <xTaskPriorityDisinherit+0x6e>
 800284a:	6813      	ldr	r3, [r2, #0]
 800284c:	2001      	movs	r0, #1
 800284e:	40b8      	lsls	r0, r7
 8002850:	ea23 0300 	bic.w	r3, r3, r0
 8002854:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002856:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002858:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800285a:	f1c3 0107 	rsb	r1, r3, #7
 800285e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002860:	6811      	ldr	r1, [r2, #0]
 8002862:	2401      	movs	r4, #1
 8002864:	fa04 f003 	lsl.w	r0, r4, r3
 8002868:	4308      	orrs	r0, r1
 800286a:	6010      	str	r0, [r2, #0]
 800286c:	2014      	movs	r0, #20
 800286e:	fb00 6003 	mla	r0, r0, r3, r6
 8002872:	4629      	mov	r1, r5
 8002874:	f7fe feae 	bl	80015d4 <vListInsertEnd>
					xReturn = pdTRUE;
 8002878:	4620      	mov	r0, r4
	}
 800287a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800287c:	20003e18 	.word	0x20003e18
 8002880:	20003e24 	.word	0x20003e24
 8002884:	20003ec4 	.word	0x20003ec4

08002888 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <pvTaskIncrementMutexHeldCount+0x14>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	b11a      	cbz	r2, 8002896 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800288e:	6819      	ldr	r1, [r3, #0]
 8002890:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002892:	3201      	adds	r2, #1
 8002894:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8002896:	6818      	ldr	r0, [r3, #0]
	}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20003e18 	.word	0x20003e18

080028a0 <UART_Receive_Int>:
	HAL_UART_Transmit(&huart, intOut, sizeof(intOut), 0xFFF);
	HAL_UART_Transmit(&huart, '\n', 1, 0xFFF);
}

void UART_Receive_Int(UART_HandleTypeDef huart, char dataArr[])
{
 80028a0:	b084      	sub	sp, #16
 80028a2:	b510      	push	{r4, lr}
 80028a4:	ac02      	add	r4, sp, #8
 80028a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
	  HAL_UART_Receive(&huart, dataArr, 8, 0xFFF);
 80028ac:	2208      	movs	r2, #8
 80028ae:	f640 73ff 	movw	r3, #4095	; 0xfff
 80028b2:	4621      	mov	r1, r4
 80028b4:	eb0d 0002 	add.w	r0, sp, r2
 80028b8:	f7fe fdec 	bl	8001494 <HAL_UART_Receive>

	  if(dataArr[0] != '\0')
 80028bc:	7823      	ldrb	r3, [r4, #0]
 80028be:	b17b      	cbz	r3, 80028e0 <UART_Receive_Int+0x40>
 80028c0:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <UART_Receive_Int+0x60>)
 80028c2:	2300      	movs	r3, #0
	  {
		  for(int i = 0; i <= 3; i++)
		  {
			  if(dataArr[i] == 'E')
 80028c4:	5ce1      	ldrb	r1, [r4, r3]
 80028c6:	2945      	cmp	r1, #69	; 0x45
 80028c8:	d10e      	bne.n	80028e8 <UART_Receive_Int+0x48>
			  {
				  Xdata[i] = '\0';
 80028ca:	2100      	movs	r1, #0
 80028cc:	54d1      	strb	r1, [r2, r3]
 80028ce:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <UART_Receive_Int+0x64>)
 80028d0:	2304      	movs	r3, #4
			  Xdata[i] = dataArr[i];
		  }

		  for(int j = 4; j <= 7; j++)
		  {
			  if(dataArr[j] == 'E')
 80028d2:	5ce1      	ldrb	r1, [r4, r3]
 80028d4:	2945      	cmp	r1, #69	; 0x45
 80028d6:	d10c      	bne.n	80028f2 <UART_Receive_Int+0x52>
			  {
				  Ydata[j-4] = '\0';
 80028d8:	4413      	add	r3, r2
 80028da:	2200      	movs	r2, #0
 80028dc:	f803 2c04 	strb.w	r2, [r3, #-4]
				  break;
			  }
			  Ydata[j-4] = dataArr[j];
		  }
	  }
}
 80028e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028e4:	b004      	add	sp, #16
 80028e6:	4770      	bx	lr
			  Xdata[i] = dataArr[i];
 80028e8:	54d1      	strb	r1, [r2, r3]
		  for(int i = 0; i <= 3; i++)
 80028ea:	3301      	adds	r3, #1
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d1e9      	bne.n	80028c4 <UART_Receive_Int+0x24>
 80028f0:	e7ed      	b.n	80028ce <UART_Receive_Int+0x2e>
			  Ydata[j-4] = dataArr[j];
 80028f2:	18d0      	adds	r0, r2, r3
		  for(int j = 4; j <= 7; j++)
 80028f4:	3301      	adds	r3, #1
 80028f6:	2b08      	cmp	r3, #8
			  Ydata[j-4] = dataArr[j];
 80028f8:	f800 1c04 	strb.w	r1, [r0, #-4]
		  for(int j = 4; j <= 7; j++)
 80028fc:	d1e9      	bne.n	80028d2 <UART_Receive_Int+0x32>
 80028fe:	e7ef      	b.n	80028e0 <UART_Receive_Int+0x40>
 8002900:	20003fdc 	.word	0x20003fdc
 8002904:	20004020 	.word	0x20004020

08002908 <Thread2>:
  /* USER CODE END 5 */ 
}

/* Thread2 function */
void Thread2(void const * argument)
{
 8002908:	b580      	push	{r7, lr}
  /* USER CODE BEGIN Thread2 */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(myMutex01Handle, portMAX_DELAY);
	  UART_Receive_Int(huart6, UARTdata);
 800290a:	4e12      	ldr	r6, [pc, #72]	; (8002954 <Thread2+0x4c>)
	  xSemaphoreTake(myMutex01Handle, portMAX_DELAY);
 800290c:	4f12      	ldr	r7, [pc, #72]	; (8002958 <Thread2+0x50>)
{
 800290e:	b08e      	sub	sp, #56	; 0x38
	  xSemaphoreTake(myMutex01Handle, portMAX_DELAY);
 8002910:	2300      	movs	r3, #0
 8002912:	4619      	mov	r1, r3
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	6838      	ldr	r0, [r7, #0]
	  UART_Receive_Int(huart6, UARTdata);
 800291a:	4d10      	ldr	r5, [pc, #64]	; (800295c <Thread2+0x54>)
	  xSemaphoreTake(myMutex01Handle, portMAX_DELAY);
 800291c:	f7ff fa86 	bl	8001e2c <xQueueGenericReceive>
	  UART_Receive_Int(huart6, UARTdata);
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <Thread2+0x58>)
 8002922:	930c      	str	r3, [sp, #48]	; 0x30
 8002924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002926:	466c      	mov	r4, sp
 8002928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002932:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002936:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800293a:	f7ff ffb1 	bl	80028a0 <UART_Receive_Int>
	  xSemaphoreGive(myMutex01Handle);
 800293e:	2300      	movs	r3, #0
 8002940:	461a      	mov	r2, r3
 8002942:	4619      	mov	r1, r3
 8002944:	6838      	ldr	r0, [r7, #0]
 8002946:	f7ff f9a9 	bl	8001c9c <xQueueGenericSend>

	  osDelay(1);
 800294a:	2001      	movs	r0, #1
 800294c:	f7fe fe1f 	bl	800158e <osDelay>
 8002950:	e7de      	b.n	8002910 <Thread2+0x8>
 8002952:	bf00      	nop
 8002954:	20003fe0 	.word	0x20003fe0
 8002958:	20004068 	.word	0x20004068
 800295c:	20003ff0 	.word	0x20003ff0
 8002960:	20003f50 	.word	0x20003f50

08002964 <servoPWM>:
	xTemp = 1700+(5*x);
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <servoPWM+0x28>)
 8002966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800296a:	f200 60a4 	addw	r0, r0, #1700	; 0x6a4
 800296e:	6018      	str	r0, [r3, #0]
	yTemp = 1700+(5*y);
 8002970:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <servoPWM+0x2c>)
 8002976:	f201 61a4 	addw	r1, r1, #1700	; 0x6a4
 800297a:	6019      	str	r1, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, xTemp);
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <servoPWM+0x30>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6358      	str	r0, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, yTemp);
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <servoPWM+0x34>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6359      	str	r1, [r3, #52]	; 0x34
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20003f58 	.word	0x20003f58
 8002990:	20003f4c 	.word	0x20003f4c
 8002994:	20003f5c 	.word	0x20003f5c
 8002998:	20003f9c 	.word	0x20003f9c

0800299c <Thread1>:
{
 800299c:	b580      	push	{r7, lr}
	  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800299e:	2100      	movs	r1, #0
 80029a0:	4818      	ldr	r0, [pc, #96]	; (8002a04 <Thread1+0x68>)
	  xSemaphoreTake(myMutex01Handle, portMAX_DELAY);
 80029a2:	4e19      	ldr	r6, [pc, #100]	; (8002a08 <Thread1+0x6c>)
	  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80029a4:	f7fe fbee 	bl	8001184 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80029a8:	2100      	movs	r1, #0
 80029aa:	4818      	ldr	r0, [pc, #96]	; (8002a0c <Thread1+0x70>)
 80029ac:	f7fe fbea 	bl	8001184 <HAL_TIM_PWM_Start>
 80029b0:	4637      	mov	r7, r6
    osDelay(3);
 80029b2:	2003      	movs	r0, #3
 80029b4:	f7fe fdeb 	bl	800158e <osDelay>
	  xSemaphoreTake(myMutex01Handle, portMAX_DELAY);
 80029b8:	2300      	movs	r3, #0
 80029ba:	f04f 32ff 	mov.w	r2, #4294967295
 80029be:	4619      	mov	r1, r3
 80029c0:	6830      	ldr	r0, [r6, #0]
	  X = atoi(Xdata);
 80029c2:	4c13      	ldr	r4, [pc, #76]	; (8002a10 <Thread1+0x74>)
	  Y = atoi(Ydata);
 80029c4:	4d13      	ldr	r5, [pc, #76]	; (8002a14 <Thread1+0x78>)
	  xSemaphoreTake(myMutex01Handle, portMAX_DELAY);
 80029c6:	f7ff fa31 	bl	8001e2c <xQueueGenericReceive>
	  X = atoi(Xdata);
 80029ca:	4813      	ldr	r0, [pc, #76]	; (8002a18 <Thread1+0x7c>)
 80029cc:	f000 faf3 	bl	8002fb6 <atoi>
 80029d0:	6020      	str	r0, [r4, #0]
	  Y = atoi(Ydata);
 80029d2:	4812      	ldr	r0, [pc, #72]	; (8002a1c <Thread1+0x80>)
 80029d4:	f000 faef 	bl	8002fb6 <atoi>
	  if(X == 40)
 80029d8:	6823      	ldr	r3, [r4, #0]
	  Y = atoi(Ydata);
 80029da:	6028      	str	r0, [r5, #0]
	  if(X == 40)
 80029dc:	2b28      	cmp	r3, #40	; 0x28
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80029de:	bf0c      	ite	eq
 80029e0:	2201      	moveq	r2, #1
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80029e2:	2200      	movne	r2, #0
 80029e4:	2102      	movs	r1, #2
 80029e6:	480e      	ldr	r0, [pc, #56]	; (8002a20 <Thread1+0x84>)
 80029e8:	f7fd fef8 	bl	80007dc <HAL_GPIO_WritePin>
	  servoPWM(X,Y);
 80029ec:	6829      	ldr	r1, [r5, #0]
 80029ee:	6820      	ldr	r0, [r4, #0]
 80029f0:	f7ff ffb8 	bl	8002964 <servoPWM>
	  xSemaphoreGive(myMutex01Handle);
 80029f4:	2300      	movs	r3, #0
 80029f6:	461a      	mov	r2, r3
 80029f8:	4619      	mov	r1, r3
 80029fa:	6838      	ldr	r0, [r7, #0]
 80029fc:	f7ff f94e 	bl	8001c9c <xQueueGenericSend>
    osDelay(3);
 8002a00:	e7d7      	b.n	80029b2 <Thread1+0x16>
 8002a02:	bf00      	nop
 8002a04:	20003f5c 	.word	0x20003f5c
 8002a08:	20004068 	.word	0x20004068
 8002a0c:	20003f9c 	.word	0x20003f9c
 8002a10:	2000406c 	.word	0x2000406c
 8002a14:	20003f98 	.word	0x20003f98
 8002a18:	20003fdc 	.word	0x20003fdc
 8002a1c:	20004020 	.word	0x20004020
 8002a20:	40020000 	.word	0x40020000

08002a24 <SystemClock_Config>:
{
 8002a24:	b530      	push	{r4, r5, lr}
 8002a26:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <SystemClock_Config+0xa4>)
 8002a2c:	9201      	str	r2, [sp, #4]
 8002a2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a30:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002a34:	6419      	str	r1, [r3, #64]	; 0x40
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a38:	4924      	ldr	r1, [pc, #144]	; (8002acc <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a42:	9202      	str	r2, [sp, #8]
 8002a44:	680b      	ldr	r3, [r1, #0]
 8002a46:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4e:	600b      	str	r3, [r1, #0]
 8002a50:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a52:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002a60:	2310      	movs	r3, #16
 8002a62:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a64:	2308      	movs	r3, #8
 8002a66:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002a68:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a6a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002a6c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a6e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002a70:	2305      	movs	r3, #5
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a72:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a74:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a76:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002a78:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7a:	f7fd feb5 	bl	80007e8 <HAL_RCC_OscConfig>
 8002a7e:	b100      	cbz	r0, 8002a82 <SystemClock_Config+0x5e>
 8002a80:	e7fe      	b.n	8002a80 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a82:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a88:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a8a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a8c:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a8e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a90:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a92:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a94:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a96:	f7fe f857 	bl	8000b48 <HAL_RCC_ClockConfig>
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	b100      	cbz	r0, 8002aa0 <SystemClock_Config+0x7c>
 8002a9e:	e7fe      	b.n	8002a9e <SystemClock_Config+0x7a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002aa0:	f7fe f8ec 	bl	8000c7c <HAL_RCC_GetHCLKFreq>
 8002aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002aac:	f7fd fd9e 	bl	80005ec <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ab0:	2004      	movs	r0, #4
 8002ab2:	f7fd fdb1 	bl	8000618 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f04f 30ff 	mov.w	r0, #4294967295
 8002abe:	f7fd fd55 	bl	800056c <HAL_NVIC_SetPriority>
}
 8002ac2:	b015      	add	sp, #84	; 0x54
 8002ac4:	bd30      	pop	{r4, r5, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40007000 	.word	0x40007000

08002ad0 <main>:
{
 8002ad0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	UARTdata[0] = '\0';
 8002ad4:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <main+0x1a4>)
{
 8002ad6:	b093      	sub	sp, #76	; 0x4c
	UARTdata[0] = '\0';
 8002ad8:	2400      	movs	r4, #0
 8002ada:	701c      	strb	r4, [r3, #0]
  HAL_Init();
 8002adc:	f7fd fd08 	bl	80004f0 <HAL_Init>
  SystemClock_Config();
 8002ae0:	f7ff ffa0 	bl	8002a24 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae4:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <main+0x1a8>)
 8002ae6:	9403      	str	r4, [sp, #12]
 8002ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002aea:	4864      	ldr	r0, [pc, #400]	; (8002c7c <main+0x1ac>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002af4:	f002 0201 	and.w	r2, r2, #1
 8002af8:	9203      	str	r2, [sp, #12]
 8002afa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002afc:	9404      	str	r4, [sp, #16]
 8002afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b00:	f042 0204 	orr.w	r2, r2, #4
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
 8002b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b08:	f002 0204 	and.w	r2, r2, #4
 8002b0c:	9204      	str	r2, [sp, #16]
 8002b0e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	9405      	str	r4, [sp, #20]
 8002b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b14:	f042 0202 	orr.w	r2, r2, #2
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002b22:	4622      	mov	r2, r4
 8002b24:	2102      	movs	r1, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Pin = LED_Pin;
 8002b28:	2502      	movs	r5, #2
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002b2a:	f7fd fe57 	bl	80007dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2e:	2301      	movs	r3, #1
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b30:	4852      	ldr	r0, [pc, #328]	; (8002c7c <main+0x1ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b32:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b34:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = LED_Pin;
 8002b36:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f7fd fd78 	bl	8000630 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002b40:	484f      	ldr	r0, [pc, #316]	; (8002c80 <main+0x1b0>)
  huart2.Init.BaudRate = 115200;
 8002b42:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <main+0x1b4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b44:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002b46:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b4a:	260c      	movs	r6, #12
  huart2.Init.BaudRate = 115200;
 8002b4c:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b50:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b52:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b54:	6146      	str	r6, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b56:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b58:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b5a:	f7fe fc6d 	bl	8001438 <HAL_UART_Init>
 8002b5e:	b100      	cbz	r0, 8002b62 <main+0x92>
 8002b60:	e7fe      	b.n	8002b60 <main+0x90>
  htim10.Instance = TIM10;
 8002b62:	4c49      	ldr	r4, [pc, #292]	; (8002c88 <main+0x1b8>)
  htim10.Init.Prescaler = 25;
 8002b64:	4b49      	ldr	r3, [pc, #292]	; (8002c8c <main+0x1bc>)
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b66:	60a0      	str	r0, [r4, #8]
  htim10.Init.Prescaler = 25;
 8002b68:	f04f 0b19 	mov.w	fp, #25
  htim10.Init.Period = 64615;
 8002b6c:	f64f 4a67 	movw	sl, #64615	; 0xfc67
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b70:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b72:	4620      	mov	r0, r4
  htim10.Init.Prescaler = 25;
 8002b74:	e884 0808 	stmia.w	r4, {r3, fp}
  htim10.Init.Period = 64615;
 8002b78:	f8c4 a00c 	str.w	sl, [r4, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b7c:	f7fe fa34 	bl	8000fe8 <HAL_TIM_Base_Init>
 8002b80:	b100      	cbz	r0, 8002b84 <main+0xb4>
 8002b82:	e7fe      	b.n	8002b82 <main+0xb2>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7fe fa49 	bl	800101c <HAL_TIM_PWM_Init>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	b100      	cbz	r0, 8002b90 <main+0xc0>
 8002b8e:	e7fe      	b.n	8002b8e <main+0xbe>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b90:	f04f 0960 	mov.w	r9, #96	; 0x60
  sConfigOC.Pulse = 4846;
 8002b94:	f241 28ee 	movw	r8, #4846	; 0x12ee
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b98:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b9a:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b9c:	a90b      	add	r1, sp, #44	; 0x2c
 8002b9e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ba0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 4846;
 8002ba4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ba8:	f7fe fa7e 	bl	80010a8 <HAL_TIM_PWM_ConfigChannel>
 8002bac:	b100      	cbz	r0, 8002bb0 <main+0xe0>
 8002bae:	e7fe      	b.n	8002bae <main+0xde>
 8002bb0:	9001      	str	r0, [sp, #4]
  HAL_TIM_MspPostInit(&htim10);
 8002bb2:	4620      	mov	r0, r4
  htim11.Instance = TIM11;
 8002bb4:	4c36      	ldr	r4, [pc, #216]	; (8002c90 <main+0x1c0>)
  HAL_TIM_MspPostInit(&htim10);
 8002bb6:	f000 f8f7 	bl	8002da8 <HAL_TIM_MspPostInit>
  htim11.Instance = TIM11;
 8002bba:	4a36      	ldr	r2, [pc, #216]	; (8002c94 <main+0x1c4>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bbc:	9b01      	ldr	r3, [sp, #4]
 8002bbe:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002bc0:	4620      	mov	r0, r4
  htim11.Init.Prescaler = 25;
 8002bc2:	e884 0804 	stmia.w	r4, {r2, fp}
  htim11.Init.Period = 64615;
 8002bc6:	f8c4 a00c 	str.w	sl, [r4, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bca:	6123      	str	r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002bcc:	f7fe fa0c 	bl	8000fe8 <HAL_TIM_Base_Init>
 8002bd0:	b100      	cbz	r0, 8002bd4 <main+0x104>
 8002bd2:	e7fe      	b.n	8002bd2 <main+0x102>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f7fe fa21 	bl	800101c <HAL_TIM_PWM_Init>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	b100      	cbz	r0, 8002be0 <main+0x110>
 8002bde:	e7fe      	b.n	8002bde <main+0x10e>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002be0:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002be2:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be4:	a90b      	add	r1, sp, #44	; 0x2c
 8002be6:	4620      	mov	r0, r4
  sConfigOC.Pulse = 4846;
 8002be8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bec:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bf0:	f7fe fa5a 	bl	80010a8 <HAL_TIM_PWM_ConfigChannel>
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	b100      	cbz	r0, 8002bfa <main+0x12a>
 8002bf8:	e7fe      	b.n	8002bf8 <main+0x128>
  HAL_TIM_MspPostInit(&htim11);
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f000 f8d4 	bl	8002da8 <HAL_TIM_MspPostInit>
  huart6.Instance = USART6;
 8002c00:	4825      	ldr	r0, [pc, #148]	; (8002c98 <main+0x1c8>)
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <main+0x1cc>)
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c04:	6146      	str	r6, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c06:	e880 0188 	stmia.w	r0, {r3, r7, r8}
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c0a:	f8c0 800c 	str.w	r8, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c0e:	f8c0 8010 	str.w	r8, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c12:	f8c0 8018 	str.w	r8, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c16:	f8c0 801c 	str.w	r8, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c1a:	f7fe fc0d 	bl	8001438 <HAL_UART_Init>
 8002c1e:	4606      	mov	r6, r0
 8002c20:	b100      	cbz	r0, 8002c24 <main+0x154>
 8002c22:	e7fe      	b.n	8002c22 <main+0x152>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002c24:	4602      	mov	r2, r0
 8002c26:	4629      	mov	r1, r5
 8002c28:	4814      	ldr	r0, [pc, #80]	; (8002c7c <main+0x1ac>)
  osThreadDef(defaultTask, Thread1, osPriorityNormal, 0, 128);
 8002c2a:	4c1d      	ldr	r4, [pc, #116]	; (8002ca0 <main+0x1d0>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002c2c:	f7fd fdd6 	bl	80007dc <HAL_GPIO_WritePin>
  osMutexDef(myMutex01);
 8002c30:	a812      	add	r0, sp, #72	; 0x48
  osThreadDef(defaultTask, Thread1, osPriorityNormal, 0, 128);
 8002c32:	ad06      	add	r5, sp, #24
  osMutexDef(myMutex01);
 8002c34:	f840 6d40 	str.w	r6, [r0, #-64]!
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002c38:	f7fe fcb1 	bl	800159e <osMutexCreate>
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <main+0x1d4>)
 8002c3e:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, Thread1, osPriorityNormal, 0, 128);
 8002c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c44:	f854 3b04 	ldr.w	r3, [r4], #4
 8002c48:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002c4a:	4631      	mov	r1, r6
 8002c4c:	a806      	add	r0, sp, #24
 8002c4e:	f7fe fc86 	bl	800155e <osThreadCreate>
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <main+0x1d8>)
 8002c54:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, Thread2, osPriorityIdle, 0, 128);
 8002c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c58:	ad0b      	add	r5, sp, #44	; 0x2c
 8002c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	602b      	str	r3, [r5, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8002c60:	4631      	mov	r1, r6
 8002c62:	a80b      	add	r0, sp, #44	; 0x2c
 8002c64:	f7fe fc7b 	bl	800155e <osThreadCreate>
 8002c68:	4b10      	ldr	r3, [pc, #64]	; (8002cac <main+0x1dc>)
 8002c6a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002c6c:	f7fe fc72 	bl	8001554 <osKernelStart>
 8002c70:	e7fe      	b.n	8002c70 <main+0x1a0>
 8002c72:	bf00      	nop
 8002c74:	20003f50 	.word	0x20003f50
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	20004024 	.word	0x20004024
 8002c84:	40004400 	.word	0x40004400
 8002c88:	20003f5c 	.word	0x20003f5c
 8002c8c:	40014400 	.word	0x40014400
 8002c90:	20003f9c 	.word	0x20003f9c
 8002c94:	40014800 	.word	0x40014800
 8002c98:	20003fe0 	.word	0x20003fe0
 8002c9c:	40011400 	.word	0x40011400
 8002ca0:	080031a8 	.word	0x080031a8
 8002ca4:	20004068 	.word	0x20004068
 8002ca8:	20003f48 	.word	0x20003f48
 8002cac:	20003fd8 	.word	0x20003fd8

08002cb0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002cb0:	6802      	ldr	r2, [r0, #0]
 8002cb2:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002cb8:	f7fd bc34 	b.w	8000524 <HAL_IncTick>
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc4:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_MspInit+0x8c>)
 8002cc8:	2400      	movs	r4, #0
 8002cca:	9400      	str	r4, [sp, #0]
 8002ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
 8002cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cd6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002cda:	9200      	str	r2, [sp, #0]
 8002cdc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	9401      	str	r4, [sp, #4]
 8002ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf0:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf4:	f7fd fc28 	bl	8000548 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002cf8:	4622      	mov	r2, r4
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	f06f 000b 	mvn.w	r0, #11
 8002d00:	f7fd fc34 	bl	800056c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002d04:	4622      	mov	r2, r4
 8002d06:	4621      	mov	r1, r4
 8002d08:	f06f 000a 	mvn.w	r0, #10
 8002d0c:	f7fd fc2e 	bl	800056c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002d10:	4622      	mov	r2, r4
 8002d12:	4621      	mov	r1, r4
 8002d14:	f06f 0009 	mvn.w	r0, #9
 8002d18:	f7fd fc28 	bl	800056c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002d1c:	4622      	mov	r2, r4
 8002d1e:	4621      	mov	r1, r4
 8002d20:	f06f 0004 	mvn.w	r0, #4
 8002d24:	f7fd fc22 	bl	800056c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002d28:	4622      	mov	r2, r4
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	f06f 0003 	mvn.w	r0, #3
 8002d30:	f7fd fc1c 	bl	800056c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d34:	4622      	mov	r2, r4
 8002d36:	210f      	movs	r1, #15
 8002d38:	f06f 0001 	mvn.w	r0, #1
 8002d3c:	f7fd fc16 	bl	800056c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002d40:	4622      	mov	r2, r4
 8002d42:	210f      	movs	r1, #15
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f7fd fc10 	bl	800056c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd10      	pop	{r4, pc}
 8002d50:	40023800 	.word	0x40023800

08002d54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM10)
 8002d54:	6803      	ldr	r3, [r0, #0]
 8002d56:	4a11      	ldr	r2, [pc, #68]	; (8002d9c <HAL_TIM_Base_MspInit+0x48>)
 8002d58:	4293      	cmp	r3, r2
{
 8002d5a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM10)
 8002d5c:	d10d      	bne.n	8002d7a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_TIM_Base_MspInit+0x4c>)
 8002d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d6a:	645a      	str	r2, [r3, #68]	; 0x44
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002d76:	b002      	add	sp, #8
 8002d78:	4770      	bx	lr
  else if(htim_base->Instance==TIM11)
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <HAL_TIM_Base_MspInit+0x50>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d1fa      	bne.n	8002d76 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d80:	2300      	movs	r3, #0
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_TIM_Base_MspInit+0x4c>)
 8002d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	9b01      	ldr	r3, [sp, #4]
}
 8002d98:	e7ed      	b.n	8002d76 <HAL_TIM_Base_MspInit+0x22>
 8002d9a:	bf00      	nop
 8002d9c:	40014400 	.word	0x40014400
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40014800 	.word	0x40014800

08002da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002da8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM10)
 8002daa:	6803      	ldr	r3, [r0, #0]
 8002dac:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <HAL_TIM_MspPostInit+0x38>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d110      	bne.n	8002dd4 <HAL_TIM_MspPostInit+0x2c>

  /* USER CODE END TIM10_MspPostInit 0 */
    /**TIM10 GPIO Configuration    
    PB8     ------> TIM10_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002db2:	f44f 7380 	mov.w	r3, #256	; 0x100
  /* USER CODE END TIM11_MspPostInit 0 */
  
    /**TIM11 GPIO Configuration    
    PB9     ------> TIM11_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002db6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002dc4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc6:	4807      	ldr	r0, [pc, #28]	; (8002de4 <HAL_TIM_MspPostInit+0x3c>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002dc8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dca:	f7fd fc31 	bl	8000630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002dce:	b007      	add	sp, #28
 8002dd0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM11)
 8002dd4:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <HAL_TIM_MspPostInit+0x40>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d1f9      	bne.n	8002dce <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dde:	e7ea      	b.n	8002db6 <HAL_TIM_MspPostInit+0xe>
 8002de0:	40014400 	.word	0x40014400
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40014800 	.word	0x40014800

08002dec <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dec:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002dee:	6803      	ldr	r3, [r0, #0]
 8002df0:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <HAL_UART_MspInit+0x80>)
 8002df2:	4293      	cmp	r3, r2
{
 8002df4:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART2)
 8002df6:	d11c      	bne.n	8002e32 <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	481d      	ldr	r0, [pc, #116]	; (8002e74 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e12:	230c      	movs	r3, #12
 8002e14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e22:	2307      	movs	r3, #7
 8002e24:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e26:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e28:	f7fd fc02 	bl	8000630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e2c:	b009      	add	sp, #36	; 0x24
 8002e2e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART6)
 8002e32:	4a11      	ldr	r2, [pc, #68]	; (8002e78 <HAL_UART_MspInit+0x8c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d1f9      	bne.n	8002e2c <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9302      	str	r3, [sp, #8]
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_UART_MspInit+0x84>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e3e:	480f      	ldr	r0, [pc, #60]	; (8002e7c <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e42:	f042 0220 	orr.w	r2, r2, #32
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e52:	23c0      	movs	r3, #192	; 0xc0
 8002e54:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e62:	2308      	movs	r3, #8
 8002e64:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e66:	a903      	add	r1, sp, #12
 8002e68:	e7de      	b.n	8002e28 <HAL_UART_MspInit+0x3c>
 8002e6a:	bf00      	nop
 8002e6c:	40004400 	.word	0x40004400
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40011400 	.word	0x40011400
 8002e7c:	40020800 	.word	0x40020800

08002e80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e80:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8002e82:	4601      	mov	r1, r0
{
 8002e84:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8002e86:	2200      	movs	r2, #0
 8002e88:	201d      	movs	r0, #29
 8002e8a:	f7fd fb6f 	bl	800056c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8002e8e:	201d      	movs	r0, #29
 8002e90:	f7fd fba0 	bl	80005d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002e94:	2500      	movs	r5, #0
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <HAL_InitTick+0x6c>)
 8002e98:	9502      	str	r5, [sp, #8]
 8002e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002e9c:	4c14      	ldr	r4, [pc, #80]	; (8002ef0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002e9e:	f042 0202 	orr.w	r2, r2, #2
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002eac:	a901      	add	r1, sp, #4
 8002eae:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002eb0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002eb2:	f7fd ff09 	bl	8000cc8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002eb6:	f7fd fee7 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_InitTick+0x74>)
 8002ebc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8002ebe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002ec2:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ec4:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_InitTick+0x78>)
 8002ec8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ecc:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
 8002ece:	6060      	str	r0, [r4, #4]
  htim3.Init.ClockDivision = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002ed0:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 8002ed2:	6125      	str	r5, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed4:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002ed6:	f7fe f887 	bl	8000fe8 <HAL_TIM_Base_Init>
 8002eda:	b920      	cbnz	r0, 8002ee6 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002edc:	4620      	mov	r0, r4
 8002ede:	f7fd ff85 	bl	8000dec <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002ee2:	b009      	add	sp, #36	; 0x24
 8002ee4:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	e7fb      	b.n	8002ee2 <HAL_InitTick+0x62>
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	20004070 	.word	0x20004070
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	000f4240 	.word	0x000f4240

08002efc <NMI_Handler>:
 8002efc:	4770      	bx	lr

08002efe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002efe:	e7fe      	b.n	8002efe <HardFault_Handler>

08002f00 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002f00:	e7fe      	b.n	8002f00 <MemManage_Handler>

08002f02 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002f02:	e7fe      	b.n	8002f02 <BusFault_Handler>

08002f04 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002f04:	e7fe      	b.n	8002f04 <UsageFault_Handler>

08002f06 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002f06:	4770      	bx	lr

08002f08 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8002f08:	f7fe bb4c 	b.w	80015a4 <osSystickHandler>

08002f0c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f0c:	4801      	ldr	r0, [pc, #4]	; (8002f14 <TIM3_IRQHandler+0x8>)
 8002f0e:	f7fd bf7d 	b.w	8000e0c <HAL_TIM_IRQHandler>
 8002f12:	bf00      	nop
 8002f14:	20004070 	.word	0x20004070

08002f18 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f18:	490f      	ldr	r1, [pc, #60]	; (8002f58 <SystemInit+0x40>)
 8002f1a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002f1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <SystemInit+0x44>)
 8002f28:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f2a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002f32:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002f40:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <SystemInit+0x48>)
 8002f42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f4c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f52:	608b      	str	r3, [r1, #8]
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000ed00 	.word	0xe000ed00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	24003010 	.word	0x24003010

08002f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f6a:	e003      	b.n	8002f74 <LoopCopyDataInit>

08002f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f72:	3104      	adds	r1, #4

08002f74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f74:	480b      	ldr	r0, [pc, #44]	; (8002fa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f7c:	d3f6      	bcc.n	8002f6c <CopyDataInit>
  ldr  r2, =_sbss
 8002f7e:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f80:	e002      	b.n	8002f88 <LoopFillZerobss>

08002f82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f84:	f842 3b04 	str.w	r3, [r2], #4

08002f88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f8c:	d3f9      	bcc.n	8002f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f8e:	f7ff ffc3 	bl	8002f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f92:	f000 f815 	bl	8002fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f96:	f7ff fd9b 	bl	8002ad0 <main>
  bx  lr    
 8002f9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f9c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002fa0:	08003320 	.word	0x08003320
  ldr  r0, =_sdata
 8002fa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fa8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002fac:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002fb0:	200040ac 	.word	0x200040ac

08002fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb4:	e7fe      	b.n	8002fb4 <ADC_IRQHandler>

08002fb6 <atoi>:
 8002fb6:	220a      	movs	r2, #10
 8002fb8:	2100      	movs	r1, #0
 8002fba:	f000 b8b1 	b.w	8003120 <strtol>
	...

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	4e0d      	ldr	r6, [pc, #52]	; (8002ff8 <__libc_init_array+0x38>)
 8002fc4:	4c0d      	ldr	r4, [pc, #52]	; (8002ffc <__libc_init_array+0x3c>)
 8002fc6:	1ba4      	subs	r4, r4, r6
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	2500      	movs	r5, #0
 8002fcc:	42a5      	cmp	r5, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	4e0b      	ldr	r6, [pc, #44]	; (8003000 <__libc_init_array+0x40>)
 8002fd2:	4c0c      	ldr	r4, [pc, #48]	; (8003004 <__libc_init_array+0x44>)
 8002fd4:	f000 f8dc 	bl	8003190 <_init>
 8002fd8:	1ba4      	subs	r4, r4, r6
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	2500      	movs	r5, #0
 8002fde:	42a5      	cmp	r5, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe8:	4798      	blx	r3
 8002fea:	3501      	adds	r5, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff2:	4798      	blx	r3
 8002ff4:	3501      	adds	r5, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	08003318 	.word	0x08003318
 8002ffc:	08003318 	.word	0x08003318
 8003000:	08003318 	.word	0x08003318
 8003004:	0800331c 	.word	0x0800331c

08003008 <memcpy>:
 8003008:	b510      	push	{r4, lr}
 800300a:	1e43      	subs	r3, r0, #1
 800300c:	440a      	add	r2, r1
 800300e:	4291      	cmp	r1, r2
 8003010:	d100      	bne.n	8003014 <memcpy+0xc>
 8003012:	bd10      	pop	{r4, pc}
 8003014:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800301c:	e7f7      	b.n	800300e <memcpy+0x6>

0800301e <_strtol_l.isra.0>:
 800301e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003022:	4680      	mov	r8, r0
 8003024:	4689      	mov	r9, r1
 8003026:	4692      	mov	sl, r2
 8003028:	461f      	mov	r7, r3
 800302a:	468b      	mov	fp, r1
 800302c:	465d      	mov	r5, fp
 800302e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003030:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003034:	f000 f88a 	bl	800314c <__locale_ctype_ptr_l>
 8003038:	4420      	add	r0, r4
 800303a:	7846      	ldrb	r6, [r0, #1]
 800303c:	f016 0608 	ands.w	r6, r6, #8
 8003040:	d10b      	bne.n	800305a <_strtol_l.isra.0+0x3c>
 8003042:	2c2d      	cmp	r4, #45	; 0x2d
 8003044:	d10b      	bne.n	800305e <_strtol_l.isra.0+0x40>
 8003046:	782c      	ldrb	r4, [r5, #0]
 8003048:	2601      	movs	r6, #1
 800304a:	f10b 0502 	add.w	r5, fp, #2
 800304e:	b167      	cbz	r7, 800306a <_strtol_l.isra.0+0x4c>
 8003050:	2f10      	cmp	r7, #16
 8003052:	d114      	bne.n	800307e <_strtol_l.isra.0+0x60>
 8003054:	2c30      	cmp	r4, #48	; 0x30
 8003056:	d00a      	beq.n	800306e <_strtol_l.isra.0+0x50>
 8003058:	e011      	b.n	800307e <_strtol_l.isra.0+0x60>
 800305a:	46ab      	mov	fp, r5
 800305c:	e7e6      	b.n	800302c <_strtol_l.isra.0+0xe>
 800305e:	2c2b      	cmp	r4, #43	; 0x2b
 8003060:	bf04      	itt	eq
 8003062:	782c      	ldrbeq	r4, [r5, #0]
 8003064:	f10b 0502 	addeq.w	r5, fp, #2
 8003068:	e7f1      	b.n	800304e <_strtol_l.isra.0+0x30>
 800306a:	2c30      	cmp	r4, #48	; 0x30
 800306c:	d127      	bne.n	80030be <_strtol_l.isra.0+0xa0>
 800306e:	782b      	ldrb	r3, [r5, #0]
 8003070:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003074:	2b58      	cmp	r3, #88	; 0x58
 8003076:	d14b      	bne.n	8003110 <_strtol_l.isra.0+0xf2>
 8003078:	786c      	ldrb	r4, [r5, #1]
 800307a:	2710      	movs	r7, #16
 800307c:	3502      	adds	r5, #2
 800307e:	2e00      	cmp	r6, #0
 8003080:	bf0c      	ite	eq
 8003082:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003086:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800308a:	2200      	movs	r2, #0
 800308c:	fbb1 fef7 	udiv	lr, r1, r7
 8003090:	4610      	mov	r0, r2
 8003092:	fb07 1c1e 	mls	ip, r7, lr, r1
 8003096:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800309a:	2b09      	cmp	r3, #9
 800309c:	d811      	bhi.n	80030c2 <_strtol_l.isra.0+0xa4>
 800309e:	461c      	mov	r4, r3
 80030a0:	42a7      	cmp	r7, r4
 80030a2:	dd1d      	ble.n	80030e0 <_strtol_l.isra.0+0xc2>
 80030a4:	1c53      	adds	r3, r2, #1
 80030a6:	d007      	beq.n	80030b8 <_strtol_l.isra.0+0x9a>
 80030a8:	4586      	cmp	lr, r0
 80030aa:	d316      	bcc.n	80030da <_strtol_l.isra.0+0xbc>
 80030ac:	d101      	bne.n	80030b2 <_strtol_l.isra.0+0x94>
 80030ae:	45a4      	cmp	ip, r4
 80030b0:	db13      	blt.n	80030da <_strtol_l.isra.0+0xbc>
 80030b2:	fb00 4007 	mla	r0, r0, r7, r4
 80030b6:	2201      	movs	r2, #1
 80030b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80030bc:	e7eb      	b.n	8003096 <_strtol_l.isra.0+0x78>
 80030be:	270a      	movs	r7, #10
 80030c0:	e7dd      	b.n	800307e <_strtol_l.isra.0+0x60>
 80030c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80030c6:	2b19      	cmp	r3, #25
 80030c8:	d801      	bhi.n	80030ce <_strtol_l.isra.0+0xb0>
 80030ca:	3c37      	subs	r4, #55	; 0x37
 80030cc:	e7e8      	b.n	80030a0 <_strtol_l.isra.0+0x82>
 80030ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80030d2:	2b19      	cmp	r3, #25
 80030d4:	d804      	bhi.n	80030e0 <_strtol_l.isra.0+0xc2>
 80030d6:	3c57      	subs	r4, #87	; 0x57
 80030d8:	e7e2      	b.n	80030a0 <_strtol_l.isra.0+0x82>
 80030da:	f04f 32ff 	mov.w	r2, #4294967295
 80030de:	e7eb      	b.n	80030b8 <_strtol_l.isra.0+0x9a>
 80030e0:	1c53      	adds	r3, r2, #1
 80030e2:	d108      	bne.n	80030f6 <_strtol_l.isra.0+0xd8>
 80030e4:	2322      	movs	r3, #34	; 0x22
 80030e6:	f8c8 3000 	str.w	r3, [r8]
 80030ea:	4608      	mov	r0, r1
 80030ec:	f1ba 0f00 	cmp.w	sl, #0
 80030f0:	d107      	bne.n	8003102 <_strtol_l.isra.0+0xe4>
 80030f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030f6:	b106      	cbz	r6, 80030fa <_strtol_l.isra.0+0xdc>
 80030f8:	4240      	negs	r0, r0
 80030fa:	f1ba 0f00 	cmp.w	sl, #0
 80030fe:	d00c      	beq.n	800311a <_strtol_l.isra.0+0xfc>
 8003100:	b122      	cbz	r2, 800310c <_strtol_l.isra.0+0xee>
 8003102:	3d01      	subs	r5, #1
 8003104:	f8ca 5000 	str.w	r5, [sl]
 8003108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800310c:	464d      	mov	r5, r9
 800310e:	e7f9      	b.n	8003104 <_strtol_l.isra.0+0xe6>
 8003110:	2430      	movs	r4, #48	; 0x30
 8003112:	2f00      	cmp	r7, #0
 8003114:	d1b3      	bne.n	800307e <_strtol_l.isra.0+0x60>
 8003116:	2708      	movs	r7, #8
 8003118:	e7b1      	b.n	800307e <_strtol_l.isra.0+0x60>
 800311a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003120 <strtol>:
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <strtol+0x24>)
 8003122:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003124:	681c      	ldr	r4, [r3, #0]
 8003126:	4d08      	ldr	r5, [pc, #32]	; (8003148 <strtol+0x28>)
 8003128:	6a23      	ldr	r3, [r4, #32]
 800312a:	2b00      	cmp	r3, #0
 800312c:	bf08      	it	eq
 800312e:	462b      	moveq	r3, r5
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	4613      	mov	r3, r2
 8003134:	460a      	mov	r2, r1
 8003136:	4601      	mov	r1, r0
 8003138:	4620      	mov	r0, r4
 800313a:	f7ff ff70 	bl	800301e <_strtol_l.isra.0>
 800313e:	b003      	add	sp, #12
 8003140:	bd30      	pop	{r4, r5, pc}
 8003142:	bf00      	nop
 8003144:	2000000c 	.word	0x2000000c
 8003148:	20000070 	.word	0x20000070

0800314c <__locale_ctype_ptr_l>:
 800314c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003150:	4770      	bx	lr

08003152 <__ascii_mbtowc>:
 8003152:	b082      	sub	sp, #8
 8003154:	b901      	cbnz	r1, 8003158 <__ascii_mbtowc+0x6>
 8003156:	a901      	add	r1, sp, #4
 8003158:	b142      	cbz	r2, 800316c <__ascii_mbtowc+0x1a>
 800315a:	b14b      	cbz	r3, 8003170 <__ascii_mbtowc+0x1e>
 800315c:	7813      	ldrb	r3, [r2, #0]
 800315e:	600b      	str	r3, [r1, #0]
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	1c10      	adds	r0, r2, #0
 8003164:	bf18      	it	ne
 8003166:	2001      	movne	r0, #1
 8003168:	b002      	add	sp, #8
 800316a:	4770      	bx	lr
 800316c:	4610      	mov	r0, r2
 800316e:	e7fb      	b.n	8003168 <__ascii_mbtowc+0x16>
 8003170:	f06f 0001 	mvn.w	r0, #1
 8003174:	e7f8      	b.n	8003168 <__ascii_mbtowc+0x16>

08003176 <__ascii_wctomb>:
 8003176:	b149      	cbz	r1, 800318c <__ascii_wctomb+0x16>
 8003178:	2aff      	cmp	r2, #255	; 0xff
 800317a:	bf85      	ittet	hi
 800317c:	238a      	movhi	r3, #138	; 0x8a
 800317e:	6003      	strhi	r3, [r0, #0]
 8003180:	700a      	strbls	r2, [r1, #0]
 8003182:	f04f 30ff 	movhi.w	r0, #4294967295
 8003186:	bf98      	it	ls
 8003188:	2001      	movls	r0, #1
 800318a:	4770      	bx	lr
 800318c:	4608      	mov	r0, r1
 800318e:	4770      	bx	lr

08003190 <_init>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	bf00      	nop
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr

0800319c <_fini>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr
